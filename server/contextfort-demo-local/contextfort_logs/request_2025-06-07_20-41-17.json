{
    "method": "POST",
    "url": "https://api.individual.githubcopilot.com/chat/completions",
    "headers": {
        "content-length": "141752",
        "authorization": "Bearer tid=7023a56fcf12df899024181795c1e57b;exp=1749355871;sku=trial_30_monthly_subscriber;proxy-ep=proxy.individual.githubcopilot.com;st=dotcom;chat=1;cit=1;malfil=1;editor_preview_features=1;ccr=1;rt=1;8kp=1;ip=69.196.33.215;asn=AS7377:fe9767995d0cae3ffe04f70d43738defa53179c4379ec4575512bd287db3a7ec",
        "content-type": "application/json",
        "copilot-integration-id": "vscode-chat",
        "editor-plugin-version": "copilot-chat/0.27.3",
        "editor-version": "vscode/1.100.2",
        "openai-intent": "conversation-agent",
        "user-agent": "GitHubCopilotChat/0.27.3",
        "vscode-machineid": "7222ecb0790ed456b7f7bab788f86388e09f52b8d8171a0b15c57015d7c60dd5",
        "vscode-sessionid": "51efd4bd-0bf8-4a49-a3c7-1a8fdb852be81749347482485",
        "x-github-api-version": "2025-05-01",
        "x-initiator": "user",
        "x-interaction-id": "5292969b-f5cd-4974-b885-3b99f461a3a5",
        "x-interaction-type": "conversation-agent",
        "x-request-id": "02476999-2e35-4c58-b506-4e7a3ad5b928",
        "x-vscode-user-agent-library-version": "electron-fetch",
        "sec-fetch-site": "none",
        "sec-fetch-mode": "no-cors",
        "sec-fetch-dest": "empty",
        "accept-encoding": "gzip, deflate, br, zstd",
        "priority": "u=4, i"
    },
    "body": "{\"messages\":[{\"role\":\"system\",\"content\":\"You are an AI programming assistant.\\nWhen asked for your name, you must respond with \\\"GitHub Copilot\\\".\\nFollow the user's requirements carefully & to the letter.\\nFollow Microsoft content policies.\\nAvoid content that violates copyrights.\\nIf you are asked to generate content that is harmful, hateful, racist, sexist, lewd, or violent, only respond with \\\"Sorry, I can't assist with that.\\\"\\nKeep your answers short and impersonal.\\n<instructions>\\nYou are a highly sophisticated automated coding agent with expert-level knowledge across many different programming languages and frameworks.\\nThe user will ask a question, or ask you to perform a task, and it may require lots of research to answer correctly. There is a selection of tools that let you perform actions or retrieve helpful context to answer the user's question.\\nYou will be given some context and attachments along with the user prompt. You can use them if they are relevant to the task, and ignore them if not.\\nIf you can infer the project type (languages, frameworks, and libraries) from the user's query or the context that you have, make sure to keep them in mind when making changes.\\nIf the user wants you to implement a feature and they have not specified the files to edit, first break down the user's request into smaller concepts and think about the kinds of files you need to grasp each concept.\\nIf you aren't sure which tool is relevant, you can call multiple tools. You can call tools repeatedly to take actions or gather as much context as needed until you have completed the task fully. Don't give up unless you are sure the request cannot be fulfilled with the tools you have. It's YOUR RESPONSIBILITY to make sure that you have done all you can to collect necessary context.\\nPrefer using the semantic_search tool to search for context unless you know the exact string or filename pattern you're searching for.\\nDon't make assumptions about the situation- gather context first, then perform the task or answer the question.\\nThink creatively and explore the workspace in order to make a complete fix.\\nDon't repeat yourself after a tool call, pick up where you left off.\\nNEVER print out a codeblock with file changes unless the user asked for it.Use the insert_edit_into_file or replace_string_in_file tool instead.\\nNEVER print out a codeblock with a terminal command to run unless the user asked for it. Use the run_in_terminal tool instead.\\nYou don't need to read a file if it's already provided in context.\\n</instructions>\\n<toolUseInstructions>\\nWhen using a tool, follow the json schema very carefully and make sure to include ALL required properties.\\nAlways output valid JSON when using a tool.\\nIf a tool exists to do a task, use the tool instead of asking the user to manually take an action.\\nIf you say that you will take an action, then go ahead and use the tool to do it. No need to ask permission.\\nNever use multi_tool_use.parallel or any tool that does not exist. Use tools using the proper procedure, DO NOT write out a json codeblock with the tool inputs.\\nNEVER say the name of a tool to a user. For example, instead of saying that you'll use the run_in_terminal tool, say \\\"I'll run the command in a terminal\\\".\\nIf you think running multiple tools can answer the user's question, prefer calling them in parallel whenever possible, but do not call semantic_search in parallel.\\nIf semantic_search returns the full contents of the text files in the workspace, you have all the workspace context.\\nDon't call the run_in_terminal tool multiple times in parallel. Instead, run one command and wait for the output before running the next command.\\nAfter you have performed the user's task, if the user corrected something you did, expressed a coding preference, or communicated a fact that you need to remember, use the update_user_preferences tool to save their preferences.\\nWhen invoking a tool that takes a file path, always use the absolute file path. If the file has a scheme like untitled: or vscode-userdata:, then use a URI with the scheme.\\n</toolUseInstructions>\\n<editFileInstructions>\\nBefore you edit an existing file, make sure you either already have it in the provided context, or read it with the read_file tool, so that you can make proper changes.\\nUse the replace_string_in_file tool to replace a string in a file, but only if you are sure that the string is unique enough to not cause any issues. You can use this tool multiple times per file.\\nUse the insert_edit_into_file tool to insert code into a file.\\nWhen editing files, group your changes by file.\\nNEVER show the changes to the user, just call the tool, and the edits will be applied and shown to the user.\\nNEVER print a codeblock that represents a change to a file, use insert_edit_into_file or replace_string_in_file instead.\\nFor each file, give a short description of what needs to be changed, then use the replace_string_in_file or insert_edit_into_file tools. You can use any tool multiple times in a response, and you can keep writing text after using a tool.\\nFollow best practices when editing files. If a popular external library exists to solve a problem, use it and properly install the package e.g. with \\\"npm install\\\" or creating a \\\"requirements.txt\\\".\\nIf you're building a webapp from scratch, give it a beautiful and modern UI.\\nAfter editing a file, any remaining errors in the file will be in the tool result. Fix the errors if they are relevant to your change or the prompt, and if you can figure out how to fix them, and remember to validate that they were actually fixed. Do not loop more than 3 times attempting to fix errors in the same file. If the third try fails, you should stop and ask the user what to do next.\\nThe insert_edit_into_file tool is very smart and can understand how to apply your edits to the user's files, you just need to provide minimal hints.\\nWhen you use the insert_edit_into_file tool, avoid repeating existing code, instead use comments to represent regions of unchanged code. The tool prefers that you are as concise as possible. For example:\\n// ...existing code...\\nchanged code\\n// ...existing code...\\nchanged code\\n// ...existing code...\\n\\nHere is an example of how you should format an edit to an existing Person class:\\nclass Person {\\n\\t// ...existing code...\\n\\tage: number;\\n\\t// ...existing code...\\n\\tgetAge() {\\n\\t\\treturn this.age;\\n\\t}\\n}\\n</editFileInstructions>\\n<outputFormatting>\\nUse proper Markdown formatting in your answers. When referring to a filename or symbol in the user's workspace, wrap it in backticks.\\n<example>\\nThe class `Person` is in `src/models/person.ts`.\\n</example>\\n\\n</outputFormatting>\",\"copilot_cache_control\":{\"type\":\"ephemeral\"}},{\"role\":\"user\",\"content\":\"<attachments>\\n<attachment id=\\\"file:package.json\\\">\\nUser's active selection, this should be the main focus:\\nExcerpt from package.json, lines 38 to 38:\\n```json\\n// filepath: /home/ashwin/Desktop/thinking-twice-website/server/contextfort-demo/copilotproxy/package.json\\nstartup\\n```\\n</attachment>\\n<attachment>\\nUser's active file for additional context:\\n```json\\n// filepath: /home/ashwin/Desktop/thinking-twice-website/server/contextfort-demo/copilotproxy/package.json\\n{\\n  \\\"name\\\": \\\"copilotproxy\\\",\\n  \\\"displayName\\\": \\\"CopilotProxy\\\",\\n  \\\"description\\\": \\\"ContextFort Security Proxy for GitHub Copilot\\\",\\n  \\\"version\\\": \\\"0.0.1\\\",\\n  \\\"engines\\\": {\\n    \\\"vscode\\\": \\\"^1.100.0\\\"\\n  },\\n  \\\"categories\\\": [\\n    \\\"Other\\\"\\n  ],\\n  \\\"repository\\\": {\\n    \\\"type\\\": \\\"git\\\",\\n    \\\"url\\\": \\\"https://github.com/ContextFort/demo\\\"\\n  },\\n  \\\"license\\\": \\\"MIT\\\",\\n  \\\"activationEvents\\\": [\\n    \\\"onStartupFinished\\\"\\n  ],\\n  \\\"main\\\": \\\"./out/extension.js\\\",\\n  \\\"contributes\\\": {\\n    \\\"commands\\\": [\\n      {\\n        \\\"command\\\": \\\"contextfort.startup\\\",\\n        \\\"title\\\": \\\"Open ContextFort Instructions\\\"\\n      },\\n      {\\n        \\\"command\\\": \\\"contextfort.toggleProxy\\\",\\n        \\\"title\\\": \\\"Toggle ContextFort Proxy Filtering\\\"\\n      },\\n      {\\n        \\\"command\\\": \\\"contextfort.openDashboard\\\",\\n        \\\"title\\\": \\\"Open ContextFort Security Dashboard\\\"\\n      }\\n    ],\\n    \\\"keybindings\\\": [\\n      {\\n        \\\"command\\\": \\\"contextfort.startup\\\",\\n        \\\"key\\\": \\\"ctrl+alt+j\\\",\\n        \\\"when\\\": \\\"editorTextFocus\\\"\\n      },\\n      {\\n        \\\"command\\\": \\\"contextfort.toggleProxy\\\",\\n        \\\"key\\\": \\\"ctrl+alt+p\\\",\\n        \\\"when\\\": \\\"editorTextFocus\\\"\\n      },\\n      {\\n        \\\"command\\\": \\\"contextfort.openDashboard\\\",\\n        \\\"key\\\": \\\"ctrl+alt+d\\\",\\n        \\\"when\\\": \\\"editorTextFocus\\\"\\n      }\\n    ]\\n  },\\n  \\\"scripts\\\": {\\n    \\\"vscode:prepublish\\\": \\\"npm run compile\\\",\\n    \\\"compile\\\": \\\"tsc -p ./\\\",\\n    \\\"watch\\\": \\\"tsc -watch -p ./\\\",\\n    \\\"pretest\\\": \\\"npm run compile && npm run lint\\\",\\n    \\\"lint\\\": \\\"eslint src\\\",\\n    \\\"test\\\": \\\"vscode-test\\\",\\n    \\\"package\\\": \\\"vsce package\\\",\\n    \\\"package:patch\\\": \\\"npm version patch --no-git-tag-version && npm run compile && vsce package\\\"\\n  },\\n  \\\"devDependencies\\\": {\\n    \\\"@types/mocha\\\": \\\"^10.0.10\\\",\\n    \\\"@types/node\\\": \\\"20.x\\\",\\n    \\\"@types/vscode\\\": \\\"^1.100.0\\\",\\n    \\\"@typescript-eslint/eslint-plugin\\\": \\\"^8.31.1\\\",\\n    \\\"@typescript-eslint/parser\\\": \\\"^8.31.1\\\",\\n    \\\"@vscode/test-cli\\\": \\\"^0.0.10\\\",\\n    \\\"@vscode/test-electron\\\": \\\"^2.5.2\\\",\\n    \\\"@vscode/vsce\\\": \\\"^3.5.0\\\",\\n    \\\"eslint\\\": \\\"^9.25.1\\\",\\n    \\\"typescript\\\": \\\"^5.8.3\\\"\\n  }\\n}\\n```\\n</attachment>\\n\\n</attachments>\\n<userPrompt>\\nfor some reason, when i launch fly deploy\\nthe code server automatically opens copilot why?\\nand copilot is stuck not even showing login\\nis there a way i can automaticlaly login and keep it when launching\\ni can provide my credentials\\n</userPrompt>\",\"copilot_cache_control\":{\"type\":\"ephemeral\"}},{\"role\":\"assistant\",\"content\":\"I'll help you understand why Copilot is automatically opening and figure out how to set up automatic login. Let's first examine your project structure and understand what's happening during the fly deploy process.\\n\\nLet's look at the relevant files to understand the startup process and how Copilot is being launched.\",\"tool_calls\":[{\"id\":\"toolu_vrtx_01MRiTgTiY27TCkgo7m34sAu\",\"function\":{\"name\":\"read_file\",\"arguments\":\"{\\\"filePath\\\": \\\"/home/ashwin/Desktop/thinking-twice-website/server/contextfort-demo/start.sh\\\", \\\"startLineNumberBaseZero\\\": 0, \\\"endLineNumberBaseZero\\\": 100}\"},\"type\":\"function\"}]},{\"role\":\"tool\",\"content\":\"Lines 0 to 100 (67 lines total):\\n```bash\\n# filepath: /home/ashwin/Desktop/thinking-twice-website/server/contextfort-demo/start.sh\\n#!/bin/bash\\nset -e\\n\\necho \\\"\ud83d\udd10 Setting up ContextFort...\\\"\\n\\n# Source the Python virtual environment\\nsource /opt/venv/bin/activate\\nexport PATH=/opt/venv/bin:$PATH\\n\\n# First check if we need to set up mitmproxy certs (this must run as root)\\nif [ ! -f /root/.mitmproxy/mitmproxy-ca-cert.pem ]; then\\n    echo \\\"\ud83d\udd11 Setting up mitmproxy certificates...\\\"\\n    /opt/venv/bin/mitmdump --listen-port 8000 > /tmp/mitmproxy-boot.log 2>&1 &\\n    TEMP_PID=$!\\n    sleep 5\\n    kill $TEMP_PID 2>/dev/null || true\\n\\n    # Trust the mitmproxy CA cert\\n    cp /root/.mitmproxy/mitmproxy-ca-cert.pem /usr/local/share/ca-certificates/mitmproxy-ca.crt\\n    update-ca-certificates\\n\\n    # Create combined CA bundle\\n    cat /etc/ssl/certs/ca-certificates.crt > /combined-ca-bundle.pem\\n    cat /root/.mitmproxy/mitmproxy-ca-cert.pem >> /combined-ca-bundle.pem\\nfi\\n\\necho \\\"\ud83d\ude80 Starting proxy state manager...\\\"\\n/opt/venv/bin/python3 /proxy_state_manager.py > /tmp/proxy_state_manager.log 2>&1 &\\nSTATE_MANAGER_PID=$!\\n\\necho \\\"\ud83d\ude80 Starting mitmdump proxy...\\\"\\nexport SSL_CERT_FILE=/usr/local/share/ca-certificates/mitmproxy-ca.crt\\nexport ELECTRON_TRUST_ENV_CA=1\\n\\n# Start mitmdump with a timeout\\n/opt/venv/bin/mitmdump -s /copilot_proxy.py --listen-port 8000 > /tmp/mitmdump.log 2>&1 &\\nPROXY_PID=$!\\n\\nsleep 2\\nif ! ps -p $PROXY_PID > /dev/null; then\\n    echo \\\"\u274c mitmdump failed to start. Logs:\\\"\\n    cat /tmp/mitmdump.log\\n    exit 1\\nfi\\n\\ntrap \\\"echo '\ud83d\uded1 Shutting down all processes...'; kill $PROXY_PID; kill $STATE_MANAGER_PID; kill $HEALTH_PID; exit\\\" INT TERM\\n\\necho \\\"\ud83d\udda5\ufe0f Starting code-server on 0.0.0.0:8080...\\\"\\n\\n# Create a dedicated user for running code-server\\nNODE_EXTRA_CA_CERTS=\\\"/usr/local/share/ca-certificates/mitmproxy-ca.crt\\\" \\\\\\nHTTP_PROXY=\\\"http://127.0.0.1:8000\\\" \\\\\\nHTTPS_PROXY=\\\"http://127.0.0.1:8000\\\" \\\\\\nNO_PROXY=\\\"localhost,127.0.0.1,::1\\\" \\\\\\ncode-server --auth password --bind-addr 0.0.0.0:8080\\n# su -c \\\"code-server --auth password --bind-addr 0.0.0.0:8080\\\" coder\\n\\necho \\\"\ud83d\udd27 Setting up MCP server configuration...\\\"\\nxdg-open \\\"vscode:mcp/install?%7B%22mcp%22%3A%7B%22servers%22%3A%7B%22Github%22%3A%7B%22url%22%3A%22https%3A%2F%2Fmcp.pipedream.net%2F51335cca-89b0-4530-94ea-e6edc8c26879%2Fgithub%22%7D%7D%7D%7D\\\"\\nxdg-open \\\"vscode:mcp/install?%7B%22mcp%22%3A%7B%22servers%22%3A%7B%22Airtable%22%3A%7B%22url%22%3A%22https%3A%2F%2Fmcp.pipedream.net%2F51335cca-89b0-4530-94ea-e6edc8c26879%2Fairtable_oauth%22%7D%7D%7D%7D\\\"\\n\\nwait\\n\\nkill $PROXY_PID\\nkill $STATE_MANAGER_PID\\nunset HTTP_PROXY HTTPS_PROXY NO_PROXY NODE_EXTRA_CA_CERTS\\n```\",\"tool_call_id\":\"toolu_vrtx_01MRiTgTiY27TCkgo7m34sAu\"},{\"role\":\"assistant\",\"content\":\"Let's also check the Dockerfile to understand the deployment setup:\",\"tool_calls\":[{\"id\":\"toolu_vrtx_01MVuTqA2qHdmQGdyEBZVYqf\",\"function\":{\"name\":\"read_file\",\"arguments\":\"{\\\"endLineNumberBaseZero\\\": 100, \\\"filePath\\\": \\\"/home/ashwin/Desktop/thinking-twice-website/server/contextfort-demo/Dockerfile\\\", \\\"startLineNumberBaseZero\\\": 0}\"},\"type\":\"function\"}]},{\"role\":\"tool\",\"content\":\"Lines 0 to 100 (54 lines total):\\n```dockerfile\\n# filepath: /home/ashwin/Desktop/thinking-twice-website/server/contextfort-demo/Dockerfile\\nFROM codercom/code-server:latest\\n\\nUSER root\\n\\n# Install mitmproxy and Python packages\\nRUN apt-get update && \\\\\\n    apt-get install -y python3-pip python3-venv && \\\\\\n    rm -rf /var/lib/apt/lists/* # Clean up apt cache\\n\\n# Create a virtual environment\\nRUN python3 -m venv /opt/venv\\n\\n# Install openai inside it\\nRUN /opt/venv/bin/pip install --upgrade pip && \\\\\\n    /opt/venv/bin/pip install mitmproxy openai watchdog dotenv\\n\\n# https://guhaogao.com/posts/2024-11-14/coder_copilot\\n# Environment variable will be injected by Fly.io secrets\\nENV OPENAI_API_KEY=\\\"\\\"\\n\\n# Copy custom script and proxy logic\\nCOPY start.sh /start.sh\\nCOPY check.py /check.py\\nCOPY copilot_proxy.py /copilot_proxy.py\\nCOPY proxy_state_manager.py /proxy_state_manager.py\\nCOPY copilot-chat-0.27.2.vsix /copilot-chat-0.27.2.vsix\\nCOPY copilotproxy-0.0.1.vsix /copilotproxy-0.0.1.vsix\\nCOPY .env /.env\\n\\n# Install the extensions\\n# First, ensure the extension directory exists for the coder user\\n# RUN mkdir -p /home/coder/.local/share/code-server/extensions\\n# RUN chown -R coder:coder /home/coder/.local\\n\\n# Install extensions as the coder user\\n# USER coder\\nRUN code-server --install-extension /copilot-chat-0.27.2.vsix\\nRUN code-server --install-extension /copilotproxy-0.0.1.vsix\\n\\n# Switch back to root for further configuration\\n# USER root\\n\\n# For MCP servers setup\\nRUN apt-get update && \\\\\\n    apt-get install -y xdg-utils && \\\\\\n    rm -rf /var/lib/apt/lists/* # Clean up apt cache\\nCOPY mcp_config.json /home/coder/.local/share/code-server/User/settings.json\\n\\nRUN chmod +x /start.sh\\n\\nENTRYPOINT []\\n\\nCMD [\\\"/start.sh\\\"]\\n```\",\"tool_call_id\":\"toolu_vrtx_01MVuTqA2qHdmQGdyEBZVYqf\"},{\"role\":\"assistant\",\"content\":\"Now, let's look at the extension.ts file to understand how the Copilot proxy is working:\",\"tool_calls\":[{\"id\":\"toolu_vrtx_0185XwupKBpJKYgPbrXkhZtR\",\"function\":{\"name\":\"read_file\",\"arguments\":\"{\\\"endLineNumberBaseZero\\\": 100, \\\"filePath\\\": \\\"/home/ashwin/Desktop/thinking-twice-website/server/contextfort-demo/copilotproxy/src/extension.ts\\\", \\\"startLineNumberBaseZero\\\": 0}\"},\"type\":\"function\"}]},{\"role\":\"tool\",\"content\":\"Lines 0 to 100 (371 lines total):\\n```typescript\\n// filepath: /home/ashwin/Desktop/thinking-twice-website/server/contextfort-demo/copilotproxy/src/extension.ts\\nimport * as vscode from 'vscode';\\nimport { ProxyConfig } from './config';\\nimport { SecurityDashboard } from './dashboard';\\n\\nexport function activate(context: vscode.ExtensionContext) {\\n  // Initialize the proxy configuration\\n  ProxyConfig.initialize(context);\\n  \\n  // Create the security dashboard\\n  const securityDashboard = new SecurityDashboard(context);\\n\\n  // Register the startup command\\n  const startupCommand = vscode.commands.registerCommand('contextfort.startup', () => {\\n    const panel = vscode.window.createWebviewPanel(\\n      'contextfortInstructions',\\n      '\ud83d\ude80 ContextFort Startup',\\n      vscode.ViewColumn.One,\\n      { \\n        enableScripts: true,\\n        retainContextWhenHidden: true\\n      }\\n    );\\n\\n    panel.webview.html = getWebviewContent(ProxyConfig.isProxyEnabled());\\n\\n    // Handle messages from the webview\\n    panel.webview.onDidReceiveMessage(\\n      message => {\\n        console.log('Received message from webview:', message);\\n        switch (message.command) {\\n          case 'toggleProxy':\\n            console.log('Toggle command received from UI');\\n            const newState = ProxyConfig.toggle();\\n            console.log(`New proxy state after toggle: ${newState}`);\\n            vscode.window.showInformationMessage(`Proxy filtering ${newState ? 'enabled' : 'disabled'}`);\\n            // Update the webview with the new state\\n            panel.webview.html = getWebviewContent(newState);\\n            return;\\n          case 'openDashboard':\\n            vscode.commands.executeCommand('contextfort.openDashboard');\\n            return;\\n        }\\n      },\\n      undefined,\\n      context.subscriptions\\n    );\\n  });\\n\\n  // Register the toggle proxy command\\n  const toggleCommand = vscode.commands.registerCommand('contextfort.toggleProxy', () => {\\n    const newState = ProxyConfig.toggle();\\n    vscode.window.showInformationMessage(`Proxy filtering ${newState ? 'enabled' : 'disabled'}`);\\n  });\\n  \\n  // Register the security dashboard command\\n  const dashboardCommand = vscode.commands.registerCommand('contextfort.openDashboard', () => {\\n    securityDashboard.open();\\n  });\\n\\n  // Register webview message handler\\n  context.subscriptions.push(\\n    vscode.window.registerWebviewPanelSerializer('securityDashboard', {\\n      async deserializeWebviewPanel(webviewPanel: vscode.WebviewPanel, state: any) {\\n        webviewPanel.webview.html = 'Loading...';\\n        securityDashboard.open();\\n      }\\n    })\\n  );\\n\\n  // Register the message handler for the security dashboard\\n  securityDashboard.registerMessageHandler();\\n\\n  context.subscriptions.push(startupCommand, toggleCommand, dashboardCommand);\\n\\n  // \ud83d\udd25 Trigger the command on startup\\n  vscode.commands.executeCommand('contextfort.startup');\\n}\\n\\nexport function deactivate() {\\n  // Clean up resources\\n}\\n\\nfunction getWebviewContent(proxyEnabled: boolean = true): string {\\n  return `\\n    <!DOCTYPE html>\\n    <html lang=\\\"en\\\">\\n    <head>\\n      <meta charset=\\\"UTF-8\\\">\\n      <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n      <style>\\n        body {\\n          font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;\\n          padding: 20px;\\n          line-height: 1.6;\\n          color: var(--vscode-editor-foreground);\\n          background-color: var(--vscode-editor-background);\\n        }\\n        h2 {\\n          color: var(--vscode-editor-foreground);\\n          border-bottom: 1px solid var(--vscode-panel-border);\\n          padding-bottom: 10px;\\n```\",\"tool_call_id\":\"toolu_vrtx_0185XwupKBpJKYgPbrXkhZtR\"},{\"role\":\"assistant\",\"content\":\"Let's read more of the extension.ts file:\",\"tool_calls\":[{\"id\":\"toolu_vrtx_016XCiirJ8bnYjGz5PdfvywP\",\"function\":{\"name\":\"read_file\",\"arguments\":\"{\\\"endLineNumberBaseZero\\\": 150, \\\"filePath\\\": \\\"/home/ashwin/Desktop/thinking-twice-website/server/contextfort-demo/copilotproxy/src/extension.ts\\\", \\\"startLineNumberBaseZero\\\": 100}\"},\"type\":\"function\"}]},{\"role\":\"tool\",\"content\":\"Lines 100 to 150 (371 lines total):\\n```typescript\\n// filepath: /home/ashwin/Desktop/thinking-twice-website/server/contextfort-demo/copilotproxy/src/extension.ts\\npadding-bottom: 10px;\\n        }\\n        pre {\\n          background-color: var(--vscode-textBlockQuote-background);\\n          padding: 16px;\\n          border-radius: 6px;\\n          overflow-x: auto;\\n          margin: 16px 0;\\n        }\\n        code {\\n          font-family: var(--vscode-editor-font-family);\\n          font-size: var(--vscode-editor-font-size);\\n        }\\n        .toggle-container {\\n          display: flex;\\n          align-items: center;\\n          margin: 20px 0;\\n          padding: 16px;\\n          border: 1px solid var(--vscode-panel-border);\\n          border-radius: 8px;\\n          background-color: var(--vscode-editor-background);\\n        }\\n        .toggle-switch {\\n          position: relative;\\n          display: inline-block;\\n          width: 60px;\\n          height: 34px;\\n          margin-right: 16px;\\n        }\\n        .toggle-switch input {\\n          opacity: 0;\\n          width: 0;\\n          height: 0;\\n        }\\n        .slider {\\n          position: absolute;\\n          cursor: pointer;\\n          top: 0;\\n          left: 0;\\n          right: 0;\\n          bottom: 0;\\n          background-color: var(--vscode-button-secondaryBackground);\\n          transition: .4s;\\n          border-radius: 34px;\\n        }\\n        .slider:before {\\n          position: absolute;\\n          content: \\\"\\\";\\n          height: 26px;\\n          width: 26px;\\n          left: 4px;\\n```\",\"tool_call_id\":\"toolu_vrtx_016XCiirJ8bnYjGz5PdfvywP\"},{\"role\":\"assistant\",\"content\":\"Let's check the startup script function related to Copilot:\",\"tool_calls\":[{\"id\":\"toolu_vrtx_01U8JPEHAv48vTkxVdwhv6UB\",\"function\":{\"name\":\"read_file\",\"arguments\":\"{\\\"endLineNumberBaseZero\\\": 300, \\\"filePath\\\": \\\"/home/ashwin/Desktop/thinking-twice-website/server/contextfort-demo/copilotproxy/src/extension.ts\\\", \\\"startLineNumberBaseZero\\\": 150}\"},\"type\":\"function\"}]},{\"role\":\"tool\",\"content\":\"Lines 150 to 300 (371 lines total):\\n```typescript\\n// filepath: /home/ashwin/Desktop/thinking-twice-website/server/contextfort-demo/copilotproxy/src/extension.ts\\nleft: 4px;\\n          bottom: 4px;\\n          background-color: white;\\n          transition: .4s;\\n          border-radius: 50%;\\n        }\\n        input:checked + .slider {\\n          background-color: var(--vscode-button-background);\\n        }\\n        input:checked + .slider:before {\\n          transform: translateX(26px);\\n        }\\n        .toggle-text {\\n          flex: 1;\\n        }\\n        .toggle-text strong {\\n          display: block;\\n          margin-bottom: 4px;\\n          font-size: 16px;\\n        }\\n        .toggle-text p {\\n          margin: 0;\\n          opacity: 0.8;\\n        }\\n        .status-indicator {\\n          display: inline-block;\\n          width: 12px;\\n          height: 12px;\\n          border-radius: 50%;\\n          margin-right: 8px;\\n          background-color: ${proxyEnabled ? 'green' : 'red'};\\n        }\\n        button {\\n          background-color: var(--vscode-button-background);\\n          color: var(--vscode-button-foreground);\\n          border: none;\\n          padding: 8px 16px;\\n          border-radius: 2px;\\n          cursor: pointer;\\n          font-size: 14px;\\n          margin-right: 8px;\\n        }\\n        button:hover {\\n          background-color: var(--vscode-button-hoverBackground);\\n        }\\n        .button-row {\\n          display: flex;\\n          margin-top: 16px;\\n        }\\n        .security-note {\\n          margin-top: 20px;\\n          padding: 12px;\\n          background-color: var(--vscode-inputValidation-infoBackground);\\n          border-left: 4px solid var(--vscode-inputValidation-infoBorder);\\n          border-radius: 4px;\\n        }\\n        .card {\\n          margin-top: 20px;\\n          padding: 16px;\\n          border: 1px solid var(--vscode-panel-border);\\n          border-radius: 8px;\\n          background-color: var(--vscode-editor-inactiveSelectionBackground);\\n        }\\n        .card h3 {\\n          margin-top: 0;\\n          margin-bottom: 12px;\\n        }\\n        .card-actions {\\n          margin-top: 12px;\\n        }\\n      </style>\\n    </head>\\n    <body>\\n      <h2>\ud83d\udee1\ufe0f ContextFort Security Proxy</h2>\\n      \\n      <div class=\\\"toggle-container\\\">\\n        <label class=\\\"toggle-switch\\\">\\n          <input type=\\\"checkbox\\\" id=\\\"proxyToggle\\\" ${proxyEnabled ? 'checked' : ''}>\\n          <span class=\\\"slider\\\"></span>\\n        </label>\\n        <div class=\\\"toggle-text\\\">\\n          <strong>\\n            <span class=\\\"status-indicator\\\"></span>\\n            Security Filtering: ${proxyEnabled ? 'Enabled' : 'Disabled'}\\n          </strong>\\n          <p>When enabled, all Copilot API calls will be inspected for potentially harmful content</p>\\n        </div>\\n      </div>\\n      \\n      <div class=\\\"card\\\">\\n        <h3>\ud83d\udcca Security Dashboard</h3>\\n        <p>View detailed information about security decisions made by the proxy.</p>\\n        <div class=\\\"card-actions\\\">\\n          <button id=\\\"openDashboardBtn\\\">Open Dashboard</button>\\n        </div>\\n      </div>\\n      \\n      <div class=\\\"security-note\\\">\\n        <strong>Note:</strong> Disabling security filtering allows all GitHub Copilot responses through without any security checks. Use with caution.\\n      </div>\\n      \\n      <h3>\ud83d\ude80 Quick Setup Guide</h3>\\n      <div class=\\\"setup-card\\\">\\n        <div class=\\\"setup-step\\\">\\n          <span class=\\\"step-number\\\">1</span>\\n          <div class=\\\"step-content\\\">\\n            <h4>Start the MCP Server</h4>\\n            <p>Click the \\\"Start\\\" button in the settings.json file that's currently open. This will initialize the Model Context Protocol server.</p>\\n          </div>\\n        </div>\\n        \\n        <div class=\\\"setup-step\\\">\\n          <span class=\\\"step-number\\\">2</span>\\n          <div class=\\\"step-content\\\">\\n            <h4>Configure GitHub Copilot</h4>\\n            <p>Login to GitHub and switch Copilot to agent mode. Don't worry about security - only you have access to this VM's URL.</p>\\n          </div>\\n        </div>\\n        \\n        <div class=\\\"setup-step\\\">\\n          <span class=\\\"step-number\\\">3</span>\\n          <div class=\\\"step-content\\\">\\n            <h4>Try this Sample Prompt</h4>\\n            <pre><code>use github mcp tool to get latest issue summary from https://github.com/johnriley9123/sample/issues/1</code></pre>\\n          </div>\\n        </div>\\n      </div>\\n      \\n      <div class=\\\"button-row\\\">\\n        <button onclick=\\\"navigator.clipboard.writeText('use github mcp tool to get latest issue summary from https://github.com/johnriley9123/sample/issues/1')\\\">\\n          \ud83d\udccb Copy Sample Prompt\\n        </button>\\n      </div>\\n      \\n      <style>\\n        .setup-card {\\n          background-color: var(--vscode-editor-inactiveSelectionBackground);\\n          border-radius: 8px;\\n          padding: 20px;\\n          margin: 16px 0;\\n          border: 1px solid var(--vscode-panel-border);\\n        }\\n        .setup-step {\\n          display: flex;\\n          margin-bottom: 20px;\\n          align-items: flex-start;\\n        }\\n        .setup-step:last-child {\\n          margin-bottom: 0;\\n        }\\n        .step-number {\\n```\",\"tool_call_id\":\"toolu_vrtx_01U8JPEHAv48vTkxVdwhv6UB\"},{\"role\":\"assistant\",\"content\":\"Let's look at the rest of the extension.ts file:\",\"tool_calls\":[{\"id\":\"toolu_vrtx_01YM3ji8HuyeUaGw4wbjRdEw\",\"function\":{\"name\":\"read_file\",\"arguments\":\"{\\\"endLineNumberBaseZero\\\": 371, \\\"filePath\\\": \\\"/home/ashwin/Desktop/thinking-twice-website/server/contextfort-demo/copilotproxy/src/extension.ts\\\", \\\"startLineNumberBaseZero\\\": 300}\"},\"type\":\"function\"}]},{\"role\":\"tool\",\"content\":\"```typescript\\n// filepath: /home/ashwin/Desktop/thinking-twice-website/server/contextfort-demo/copilotproxy/src/extension.ts\\n.step-number {\\n          background-color: var(--vscode-button-background);\\n          color: var(--vscode-button-foreground);\\n          width: 28px;\\n          height: 28px;\\n          border-radius: 50%;\\n          display: flex;\\n          align-items: center;\\n          justify-content: center;\\n          font-weight: bold;\\n          margin-right: 15px;\\n          flex-shrink: 0;\\n        }\\n        .step-content {\\n          flex: 1;\\n        }\\n        .step-content h4 {\\n          margin: 0 0 8px 0;\\n          color: var(--vscode-editor-foreground);\\n        }\\n        .step-content p {\\n          margin: 0;\\n          opacity: 0.9;\\n        }\\n        .step-content pre {\\n          margin-top: 10px;\\n          background-color: var(--vscode-textBlockQuote-background);\\n          padding: 12px;\\n          border-radius: 4px;\\n        }\\n      </style>\\n\\n      <script>\\n        (function() {\\n          const vscode = acquireVsCodeApi();\\n          \\n          // Add click handler to the entire toggle container for better UX\\n          document.querySelector('.toggle-container').addEventListener('click', function(e) {\\n            // Don't trigger if clicking on the checkbox directly (it will handle itself)\\n            if (e.target.id !== 'proxyToggle') {\\n              const checkbox = document.getElementById('proxyToggle');\\n              checkbox.checked = !checkbox.checked;\\n              \\n              // Manually dispatch message to VS Code\\n              vscode.postMessage({\\n                command: 'toggleProxy'\\n              });\\n            }\\n          });\\n          \\n          // Original checkbox change handler\\n          document.getElementById('proxyToggle').addEventListener('change', function(e) {\\n            console.log('Toggle checkbox changed:', e.target.checked);\\n            vscode.postMessage({\\n              command: 'toggleProxy'\\n            });\\n          });\\n\\n          // Dashboard button click handler\\n          document.getElementById('openDashboardBtn').addEventListener('click', function() {\\n            vscode.postMessage({\\n              command: 'openDashboard'\\n            });\\n          });\\n        })();\\n      </script>\\n    </body>\\n    </html>\\n  `;\\n}\\n```\",\"tool_call_id\":\"toolu_vrtx_01YM3ji8HuyeUaGw4wbjRdEw\"},{\"role\":\"assistant\",\"content\":\"Let's check for any Copilot automation or login management in the Python proxy files:\",\"tool_calls\":[{\"id\":\"toolu_vrtx_01NDFojGbC8zWbfqeddp6yEn\",\"function\":{\"name\":\"read_file\",\"arguments\":\"{\\\"endLineNumberBaseZero\\\": 100, \\\"filePath\\\": \\\"/home/ashwin/Desktop/thinking-twice-website/server/contextfort-demo/copilot_proxy.py\\\", \\\"startLineNumberBaseZero\\\": 0}\"},\"type\":\"function\"}]},{\"role\":\"tool\",\"content\":\"Lines 0 to 100 (319 lines total):\\n```python\\n# filepath: /home/ashwin/Desktop/thinking-twice-website/server/contextfort-demo/copilot_proxy.py\\nimport os\\nfrom mitmproxy import http\\nfrom datetime import datetime\\nimport json\\nimport sys\\nimport dotenv\\n\\ndotenv.load_dotenv()\\n\\n# Add the path where the proxy_state_manager is located\\nsys.path.append('/opt/contextfort')\\n\\n# Try to import the proxy state manager\\ntry:\\n    from proxy_state_manager import is_proxy_filtering_enabled\\n    check_proxy_enabled = is_proxy_filtering_enabled\\nexcept ImportError:\\n    # Default to always enabled if the module isn't available\\n    def check_proxy_enabled():\\n        print(\\\"Warning: Could not import proxy_state_manager, defaulting to enabled\\\")\\n        return True\\n\\n# Import the security checker\\nfrom check import SecurityChecker, Context\\n\\n# Path to intercept for Copilot completions\\nINTERCEPTED_PATH = \\\"/chat/completions\\\"\\n\\n# Define the folder where logs will be stored\\nLOG_FOLDER = \\\"/tmp/contextfort_logs\\\"\\nif not os.path.exists(LOG_FOLDER):\\n    os.makedirs(LOG_FOLDER)\\n\\n# Create an additional folder for security decisions\\nSECURITY_LOG_FOLDER = os.path.join(LOG_FOLDER, \\\"security_decisions\\\")\\nif not os.path.exists(SECURITY_LOG_FOLDER):\\n    os.makedirs(SECURITY_LOG_FOLDER)\\n\\ndef log_request(flow: http.HTTPFlow):\\n    \\\"\\\"\\\"Logs the request details to a file.\\\"\\\"\\\"\\n    # Get timestamp for the log file\\n    timestamp = datetime.now().strftime(\\\"%Y-%m-%d_%H-%M-%S\\\")\\n    log_filename = os.path.join(LOG_FOLDER, f\\\"request_{timestamp}.json\\\")\\n    \\n    # Prepare request data to log\\n    request_data = {\\n        \\\"method\\\": flow.request.method,\\n        \\\"url\\\": flow.request.pretty_url,\\n        \\\"headers\\\": dict(flow.request.headers),\\n        \\\"body\\\": flow.request.get_text(),  # Limit long bodies\\n        \\\"timestamp\\\": timestamp\\n    }\\n\\n    # Write request data to log file\\n    with open(log_filename, \\\"w\\\") as log_file:\\n        json.dump(request_data, log_file, indent=4)\\n    print(f\\\"\ud83d\udd0d Intercepted request at {timestamp}\\\")\\n\\n\\ndef extract_tool_calls_from_response(response_body: str) -> list:\\n    \\\"\\\"\\\"Extract tool calls from the response body.\\\"\\\"\\\"\\n    tool_calls = []\\n    current_tool_call = None\\n    \\n    try:\\n        # Split the SSE data into individual lines\\n        lines = response_body.split('\\\\n')\\n        \\n        for line in lines:\\n            line = line.strip()\\n            if line.startswith('data: ') and line != 'data: [DONE]':\\n                try:\\n                    # Extract JSON from the data line\\n                    json_data = line[6:]  # Remove 'data: ' prefix\\n                    data = json.loads(json_data)\\n                    \\n                    # Check if any choice has tool_calls in delta\\n                    if 'choices' in data:\\n                        for choice in data['choices']:\\n                            if 'delta' in choice and 'tool_calls' in choice['delta']:\\n                                delta_tool_calls = choice['delta']['tool_calls']\\n                                \\n                                for delta_tool_call in delta_tool_calls:\\n                                    tool_call_id = delta_tool_call.get('id')\\n                                    tool_call_index = delta_tool_call.get('index', 0)\\n                                    \\n                                    # If this is a new tool call, create it\\n                                    if tool_call_id and (not current_tool_call or current_tool_call.get('id') != tool_call_id):\\n                                        if current_tool_call:\\n                                            tool_calls.append(current_tool_call)\\n                                        \\n                                        current_tool_call = {\\n                                            'id': tool_call_id,\\n                                            'type': delta_tool_call.get('type', 'function'),\\n                                            'function': {\\n                                                'name': '',\\n                                                'arguments': ''\\n                                            }\\n                                        }\\n                                    \\n                                    # Update function details\\n```\",\"tool_call_id\":\"toolu_vrtx_01NDFojGbC8zWbfqeddp6yEn\"},{\"role\":\"assistant\",\"content\":\"Let's examine the proxy_state_manager.py file:\",\"tool_calls\":[{\"id\":\"toolu_vrtx_01U3Y3qLe3r1Uxkof2ETjmcB\",\"function\":{\"name\":\"read_file\",\"arguments\":\"{\\\"endLineNumberBaseZero\\\": 100, \\\"filePath\\\": \\\"/home/ashwin/Desktop/thinking-twice-website/server/contextfort-demo/proxy_state_manager.py\\\", \\\"startLineNumberBaseZero\\\": 0}\"},\"type\":\"function\"}]},{\"role\":\"tool\",\"content\":\"Lines 0 to 100 (82 lines total):\\n```python\\n# filepath: /home/ashwin/Desktop/thinking-twice-website/server/contextfort-demo/proxy_state_manager.py\\n#!/usr/bin/env python3\\n# Script to make the proxy script aware of the enabled/disabled state\\n\\nimport os\\nimport json\\nimport time\\nfrom pathlib import Path\\nfrom watchdog.observers import Observer\\nfrom watchdog.events import FileSystemEventHandler\\n\\n# Path to the state file that the extension will update\\nSTATE_FILE = \\\"/tmp/contextfort_proxy_state.json\\\"\\nLOG_DIR = \\\"/tmp/contextfort_logs\\\"\\n\\n# Ensure log directory exists\\nos.makedirs(LOG_DIR, exist_ok=True)\\n\\n# Global flag to track if proxy filtering is enabled\\nproxy_enabled = True\\n\\ndef log_message(msg):\\n    \\\"\\\"\\\"Log a message to the state manager log file\\\"\\\"\\\"\\n    with open(os.path.join(LOG_DIR, \\\"state_manager.log\\\"), \\\"a\\\") as f:\\n        timestamp = time.strftime(\\\"%Y-%m-%d %H:%M:%S\\\")\\n        f.write(f\\\"[{timestamp}] {msg}\\\\n\\\")\\n    print(msg)\\n\\nclass StateFileHandler(FileSystemEventHandler):\\n    def on_modified(self, event):\\n        global proxy_enabled\\n        if not event.is_directory and Path(event.src_path).name == Path(STATE_FILE).name:\\n            try:\\n                with open(STATE_FILE, 'r') as f:\\n                    state = json.load(f)\\n                    proxy_enabled = state.get('enabled', True)\\n                    log_message(f\\\"Proxy filtering {'enabled' if proxy_enabled else 'disabled'}\\\")\\n            except Exception as e:\\n                log_message(f\\\"Error reading state file: {e}\\\")\\n                proxy_enabled = True  # Default to enabled on error\\n\\ndef is_proxy_filtering_enabled():\\n    \\\"\\\"\\\"Function that can be imported by the proxy script to check if filtering is enabled\\\"\\\"\\\"\\n    global proxy_enabled\\n\\n    # Also directly check the file on each call for redundancy\\n    try:\\n        with open(STATE_FILE, 'r') as f:\\n            state = json.load(f)\\n            current_state = state.get('enabled', True)\\n            if current_state != proxy_enabled:\\n                proxy_enabled = current_state\\n                log_message(f\\\"Direct check: Proxy filtering {'enabled' if proxy_enabled else 'disabled'}\\\")\\n    except Exception as e:\\n        log_message(f\\\"Error in direct check of state file: {e}\\\")\\n    \\n    return proxy_enabled\\n\\ndef create_default_state_file():\\n    \\\"\\\"\\\"Create the default state file if it doesn't exist\\\"\\\"\\\"\\n    if not os.path.exists(STATE_FILE):\\n        with open(STATE_FILE, 'w') as f:\\n            json.dump({\\\"enabled\\\": True, \\\"timestamp\\\": time.strftime(\\\"%Y-%m-%dT%H:%M:%S\\\")}, f)\\n        os.chmod(STATE_FILE, 0o644)  # Make it readable by all users\\n        log_message(f\\\"Created default state file at {STATE_FILE}\\\")\\n\\nif __name__ == \\\"__main__\\\":\\n    create_default_state_file()\\n    \\n    # Set up file watcher\\n    event_handler = StateFileHandler()\\n    observer = Observer()\\n    observer.schedule(event_handler, path=str(Path(STATE_FILE).parent), recursive=False)\\n    observer.start()\\n    \\n    try:\\n        log_message(f\\\"Monitoring {STATE_FILE} for changes...\\\")\\n        while True:\\n            time.sleep(1)\\n    except KeyboardInterrupt:\\n        observer.stop()\\n    observer.join()\\n```\",\"tool_call_id\":\"toolu_vrtx_01U3Y3qLe3r1Uxkof2ETjmcB\"},{\"role\":\"assistant\",\"content\":\"Now, let's look at the fly.toml file to understand the deployment configuration:\",\"tool_calls\":[{\"id\":\"toolu_vrtx_01W6gjYe1UPakQ3t4aESMiRt\",\"function\":{\"name\":\"read_file\",\"arguments\":\"{\\\"endLineNumberBaseZero\\\": 100, \\\"filePath\\\": \\\"/home/ashwin/Desktop/thinking-twice-website/server/contextfort-demo/fly.toml\\\", \\\"startLineNumberBaseZero\\\": 0}\"},\"type\":\"function\"}]},{\"role\":\"tool\",\"content\":\"Lines 0 to 100 (41 lines total):\\n```plaintext\\n// filepath: /home/ashwin/Desktop/thinking-twice-website/server/contextfort-demo/fly.toml\\n# fly.toml app configuration file generated for contextfort-demo-8053 on 2025-06-05T22:41:46-07:00\\n#\\n# See https://fly.io/docs/reference/configuration/ for information about how to use this file.\\n#\\n\\napp = 'contextfort-demo'\\nprimary_region = 'lax'\\n\\n[build]\\n  dockerfile = 'Dockerfile'\\n\\n[deploy]\\n  release_command = \\\"echo 'App is starting...'\\\"\\n  strategy = \\\"immediate\\\"\\n\\n[[vm]]\\n  cpu_kind = \\\"performance\\\"\\n  memory = \\\"2048mb\\\"\\n  size = \\\"performance-1x\\\"\\n\\n[[services]]\\n  protocol = 'tcp'\\n  internal_port = 8080\\n  \\n  # Add health check\\n  [[services.http_checks]]\\n    interval = 10000\\n    grace_period = \\\"30s\\\"\\n    method = \\\"get\\\"\\n    path = \\\"/healthz\\\"\\n    protocol = \\\"http\\\"\\n    timeout = 2000\\n\\n  [[services.ports]]\\n    port = 80\\n    handlers = ['http']\\n\\n  [[services.ports]]\\n    port = 443\\n    handlers = ['tls', 'http']\\n```\",\"tool_call_id\":\"toolu_vrtx_01W6gjYe1UPakQ3t4aESMiRt\"},{\"role\":\"assistant\",\"content\":\"Finally, let's look at what's in the package.json scripts section to better understand the startup process:\",\"tool_calls\":[{\"id\":\"toolu_vrtx_019iCvVFq9bACzkJbv5qmDW6\",\"function\":{\"name\":\"grep_search\",\"arguments\":\"{\\\"query\\\": \\\"startup\\\"}\"},\"type\":\"function\"}]},{\"role\":\"tool\",\"content\":\"16 total results\\n<match path=\\\"/home/ashwin/Desktop/thinking-twice-website/server/contextfort-demo/copilotproxy/package.json\\\" line=18>\\n18:    \\\"onStartupFinished\\\"\\n</match>\\n<match path=\\\"/home/ashwin/Desktop/thinking-twice-website/server/contextfort-demo/copilotproxy/package.json\\\" line=24>\\n24:        \\\"command\\\": \\\"contextfort.startup\\\",\\n</match>\\n<match path=\\\"/home/ashwin/Desktop/thinking-twice-website/server/contextfort-demo/copilotproxy/package.json\\\" line=38>\\n38:        \\\"command\\\": \\\"contextfort.startup\\\",\\n</match>\\n<match path=\\\"/home/ashwin/Desktop/thinking-twice-website/server/contextfort-demo/copilotproxy/src/extension.ts\\\" line=12>\\n12:  // Register the startup command\\n</match>\\n<match path=\\\"/home/ashwin/Desktop/thinking-twice-website/server/contextfort-demo/copilotproxy/src/extension.ts\\\" line=13>\\n13:  const startupCommand = vscode.commands.registerCommand('contextfort.startup', () => {\\n</match>\\n<match path=\\\"/home/ashwin/Desktop/thinking-twice-website/server/contextfort-demo/copilotproxy/src/extension.ts\\\" line=13>\\n13:  const startupCommand = vscode.commands.registerCommand('contextfort.startup', () => {\\n</match>\\n<match path=\\\"/home/ashwin/Desktop/thinking-twice-website/server/contextfort-demo/copilotproxy/src/extension.ts\\\" line=16>\\n16:      '\ud83d\ude80 ContextFort Startup',\\n</match>\\n<match path=\\\"/home/ashwin/Desktop/thinking-twice-website/server/contextfort-demo/copilotproxy/src/extension.ts\\\" line=73>\\n73:  context.subscriptions.push(startupCommand, toggleCommand, dashboardCommand);\\n</match>\\n<match path=\\\"/home/ashwin/Desktop/thinking-twice-website/server/contextfort-demo/copilotproxy/src/extension.ts\\\" line=75>\\n75:  // \ud83d\udd25 Trigger the command on startup\\n</match>\\n<match path=\\\"/home/ashwin/Desktop/thinking-twice-website/server/contextfort-demo/copilotproxy/src/extension.ts\\\" line=76>\\n76:  vscode.commands.executeCommand('contextfort.startup');\\n</match>\\n<match path=\\\"/home/ashwin/Desktop/thinking-twice-website/server/contextfort-demo/copilotproxy/vsc-extension-quickstart.md\\\" line=41>\\n41:* Reduce the extension size and improve the startup time by [bundling your extension](https://code.visualstudio.com/api/working-with-extensions/bundling-extension).\\n</match>\\n<match path=\\\"/home/ashwin/Desktop/thinking-twice-website/server/contextfort-demo/copilotproxy/out/extension.js\\\" line=46>\\n46:    // Register the startup command\\n</match>\\n<match path=\\\"/home/ashwin/Desktop/thinking-twice-website/server/contextfort-demo/copilotproxy/out/extension.js\\\" line=47>\\n47:    const startupCommand = vscode.commands.registerCommand('contextfort.startup', () => {\\n</match>\\n<match path=\\\"/home/ashwin/Desktop/thinking-twice-website/server/contextfort-demo/copilotproxy/out/extension.js\\\" line=47>\\n47:    const startupCommand = vscode.commands.registerCommand('contextfort.startup', () => {\\n</match>\\n<match path=\\\"/home/ashwin/Desktop/thinking-twice-website/server/contextfort-demo/copilotproxy/out/extension.js\\\" line=48>\\n48:        const panel = vscode.window.createWebviewPanel('contextfortInstructions', '\ud83d\ude80 ContextFort Startup', vscode.ViewColumn.One, {\\n</match>\\n<match path=\\\"/home/ashwin/Desktop/thinking-twice-website/server/contextfort-demo/copilotproxy/out/extension.js\\\" line=89>\\n89:    context.subscriptions.push(startupCommand, toggleCommand, dashboardCommand);\\n</match>\\n<match path=\\\"/home/ashwin/Desktop/thinking-twice-website/server/contextfort-demo/copilotproxy/out/extension.js\\\" line=90>\\n90:    // \ud83d\udd25 Trigger the command on startup\\n</match>\\n<match path=\\\"/home/ashwin/Desktop/thinking-twice-website/server/contextfort-demo/copilotproxy/out/extension.js\\\" line=91>\\n91:    vscode.commands.executeCommand('contextfort.startup');\\n</match>\",\"tool_call_id\":\"toolu_vrtx_019iCvVFq9bACzkJbv5qmDW6\"},{\"role\":\"assistant\",\"content\":\"Based on my analysis, here's what's happening:\\n\\n1. When you run `fly deploy`, your Docker container starts up with the `start.sh` script as the entry point.\\n2. The script starts code-server (VS Code in the browser) with a proxy intercepting all HTTP/HTTPS traffic.\\n3. Inside VS Code, the ContextFort extension (copilotproxy) automatically activates on startup due to the `onStartupFinished` activation event in package.json.\\n4. In the extension.ts, there's a line `vscode.commands.executeCommand('contextfort.startup')` that runs as part of the extension activation, which opens the ContextFort instructions panel.\\n5. From what I can see, the Copilot extension is pre-installed in the Docker image and automatically launched, but there's no automated login mechanism.\\n\\n## How to Add Automatic Login for Copilot\\n\\nTo implement an automatic login for GitHub Copilot in your deployment, we can modify the startup script to include the necessary credentials. Here's how to implement this solution:\\n\\n1. First, let's create a script that will automate the Copilot login process.\",\"tool_calls\":[{\"id\":\"toolu_vrtx_015VYnpevpoBQH3oyiPn8Y6D\",\"function\":{\"name\":\"create_file\",\"arguments\":\"{\\\"filePath\\\": \\\"/home/ashwin/Desktop/thinking-twice-website/server/contextfort-demo/copilot_login.js\\\", \\\"content\\\": \\\"// This script will be used to automate GitHub Copilot login\\\\n// It uses the VS Code settings to automatically authenticate Copilot\\\\n\\\\nconst fs = require('fs');\\\\nconst path = require('path');\\\\nconst os = require('os');\\\\n\\\\n// Path to the VS Code settings file\\\\nconst SETTINGS_DIR = path.join(os.homedir(), '.local', 'share', 'code-server', 'User');\\\\nconst SETTINGS_FILE = path.join(SETTINGS_DIR, 'settings.json');\\\\n\\\\n// Ensure the directory exists\\\\nif (!fs.existsSync(SETTINGS_DIR)) {\\\\n    fs.mkdirSync(SETTINGS_DIR, { recursive: true });\\\\n}\\\\n\\\\n// Read existing settings if available\\\\nlet settings = {};\\\\nif (fs.existsSync(SETTINGS_FILE)) {\\\\n    try {\\\\n        const data = fs.readFileSync(SETTINGS_FILE, 'utf8');\\\\n        settings = JSON.parse(data);\\\\n    } catch (err) {\\\\n        console.error('Error reading settings file:', err);\\\\n    }\\\\n}\\\\n\\\\n// Add GitHub Copilot authentication settings\\\\n// The GITHUB_TOKEN environment variable should be set in fly.io secrets\\\\nconst githubToken = process.env.GITHUB_TOKEN;\\\\nif (githubToken) {\\\\n    settings['github.copilot.advanced'] = {\\\\n        \\\\\\\"debug.testTokens\\\\\\\": true,\\\\n        \\\\\\\"debug.overrideEngine\\\\\\\": \\\\\\\"davinci\\\\\\\", // Use default model\\\\n        \\\\\\\"authProvider\\\\\\\": \\\\\\\"github\\\\\\\"\\\\n    };\\\\n    \\\\n    // Set the authentication token\\\\n    settings['github.copilot.gitHubToken'] = githubToken;\\\\n    \\\\n    // Write the updated settings back to the file\\\\n    fs.writeFileSync(SETTINGS_FILE, JSON.stringify(settings, null, 2));\\\\n    console.log('GitHub Copilot authentication settings updated');\\\\n} else {\\\\n    console.error('GITHUB_TOKEN environment variable not found');\\\\n}\\\"}\"},\"type\":\"function\"}]},{\"role\":\"tool\",\"content\":\"The following files were successfully edited:\\n/home/ashwin/Desktop/thinking-twice-website/server/contextfort-demo/copilot_login.js\",\"tool_call_id\":\"toolu_vrtx_015VYnpevpoBQH3oyiPn8Y6D\"},{\"role\":\"assistant\",\"content\":\"2. Now, let's modify the Dockerfile to include our new script:\",\"tool_calls\":[{\"id\":\"toolu_vrtx_01Ti8XduQ4WADHx3zBbXcMTJ\",\"function\":{\"name\":\"replace_string_in_file\",\"arguments\":\"{\\\"filePath\\\": \\\"/home/ashwin/Desktop/thinking-twice-website/server/contextfort-demo/Dockerfile\\\", \\\"oldString\\\": \\\"# Copy custom script and proxy logic\\\\nCOPY start.sh /start.sh\\\\nCOPY check.py /check.py\\\\nCOPY copilot_proxy.py /copilot_proxy.py\\\\nCOPY proxy_state_manager.py /proxy_state_manager.py\\\\nCOPY copilot-chat-0.27.2.vsix /copilot-chat-0.27.2.vsix\\\\nCOPY copilotproxy-0.0.1.vsix /copilotproxy-0.0.1.vsix\\\\nCOPY .env /.env\\\", \\\"newString\\\": \\\"# Copy custom script and proxy logic\\\\nCOPY start.sh /start.sh\\\\nCOPY check.py /check.py\\\\nCOPY copilot_proxy.py /copilot_proxy.py\\\\nCOPY proxy_state_manager.py /proxy_state_manager.py\\\\nCOPY copilot-chat-0.27.2.vsix /copilot-chat-0.27.2.vsix\\\\nCOPY copilotproxy-0.0.1.vsix /copilotproxy-0.0.1.vsix\\\\nCOPY copilot_login.js /copilot_login.js\\\\nCOPY .env /.env\\\"}\"},\"type\":\"function\"}]},{\"role\":\"tool\",\"content\":\"The following files were successfully edited:\\n/home/ashwin/Desktop/thinking-twice-website/server/contextfort-demo/Dockerfile\",\"tool_call_id\":\"toolu_vrtx_01Ti8XduQ4WADHx3zBbXcMTJ\"},{\"role\":\"assistant\",\"content\":\"3. Now, let's modify the start.sh script to run our Copilot login script before starting code-server:\",\"tool_calls\":[{\"id\":\"toolu_vrtx_013uW1sKj3k6cgmefcY5P9Sh\",\"function\":{\"name\":\"replace_string_in_file\",\"arguments\":\"{\\\"filePath\\\": \\\"/home/ashwin/Desktop/thinking-twice-website/server/contextfort-demo/start.sh\\\", \\\"newString\\\": \\\"echo \\\\\\\"\ud83d\udda5\ufe0f Starting code-server on 0.0.0.0:8080...\\\\\\\"\\\\n\\\\n# Configure GitHub Copilot authentication before starting code-server\\\\necho \\\\\\\"\ud83d\udd10 Setting up GitHub Copilot authentication...\\\\\\\"\\\\nnode /copilot_login.js\\\\n\\\\n# Create a dedicated user for running code-server\\\\nNODE_EXTRA_CA_CERTS=\\\\\\\"/usr/local/share/ca-certificates/mitmproxy-ca.crt\\\\\\\" \\\\\\\\\\\\nHTTP_PROXY=\\\\\\\"http://127.0.0.1:8000\\\\\\\" \\\\\\\\\\\\nHTTPS_PROXY=\\\\\\\"http://127.0.0.1:8000\\\\\\\" \\\\\\\\\\\\nNO_PROXY=\\\\\\\"localhost,127.0.0.1,::1\\\\\\\" \\\\\\\\\\\\ncode-server --auth password --bind-addr 0.0.0.0:8080\\\", \\\"oldString\\\": \\\"echo \\\\\\\"\ud83d\udda5\ufe0f Starting code-server on 0.0.0.0:8080...\\\\\\\"\\\\n\\\\n# Create a dedicated user for running code-server\\\\nNODE_EXTRA_CA_CERTS=\\\\\\\"/usr/local/share/ca-certificates/mitmproxy-ca.crt\\\\\\\" \\\\\\\\\\\\nHTTP_PROXY=\\\\\\\"http://127.0.0.1:8000\\\\\\\" \\\\\\\\\\\\nHTTPS_PROXY=\\\\\\\"http://127.0.0.1:8000\\\\\\\" \\\\\\\\\\\\nNO_PROXY=\\\\\\\"localhost,127.0.0.1,::1\\\\\\\" \\\\\\\\\\\\ncode-server --auth password --bind-addr 0.0.0.0:8080\\\"}\"},\"type\":\"function\"}]},{\"role\":\"tool\",\"content\":\"The following files were successfully edited:\\n/home/ashwin/Desktop/thinking-twice-website/server/contextfort-demo/start.sh\",\"tool_call_id\":\"toolu_vrtx_013uW1sKj3k6cgmefcY5P9Sh\"},{\"role\":\"assistant\",\"content\":\"4. Now, let's create a script to set your GitHub token in fly.io secrets:\",\"tool_calls\":[{\"id\":\"toolu_vrtx_0114ziD6W3LLxrqhJWe5VLSj\",\"function\":{\"name\":\"create_file\",\"arguments\":\"{\\\"content\\\": \\\"#!/bin/bash\\\\n# This script sets up the GitHub token in fly.io secrets\\\\n\\\\n# Check if the GitHub token is provided\\\\nif [ $# -ne 1 ]; then\\\\n    echo \\\\\\\"Usage: $0 <github_token>\\\\\\\"\\\\n    echo \\\\\\\"Example: $0 ghp_1234567890abcdefghijklmnopqrstuvwxyz\\\\\\\"\\\\n    exit 1\\\\nfi\\\\n\\\\nGITHUB_TOKEN=$1\\\\n\\\\n# Set the GitHub token as a fly.io secret\\\\necho \\\\\\\"Setting GitHub token as a fly.io secret...\\\\\\\"\\\\nfly secrets set GITHUB_TOKEN=\\\\\\\"$GITHUB_TOKEN\\\\\\\"\\\\n\\\\necho \\\\\\\"Secret set successfully. You can now deploy with: fly deploy\\\\\\\"\\\", \\\"filePath\\\": \\\"/home/ashwin/Desktop/thinking-twice-website/server/contextfort-demo/set_github_token.sh\\\"}\"},\"type\":\"function\"}]},{\"role\":\"tool\",\"content\":\"The following files were successfully edited:\\n/home/ashwin/Desktop/thinking-twice-website/server/contextfort-demo/set_github_token.sh\",\"tool_call_id\":\"toolu_vrtx_0114ziD6W3LLxrqhJWe5VLSj\"},{\"role\":\"assistant\",\"content\":\"5. Make the script executable:\",\"tool_calls\":[{\"id\":\"toolu_vrtx_01UvdZQfbBht8qTWSbsdtvje\",\"function\":{\"name\":\"run_in_terminal\",\"arguments\":\"{\\\"command\\\": \\\"chmod +x /home/ashwin/Desktop/thinking-twice-website/server/contextfort-demo/set_github_token.sh\\\", \\\"explanation\\\": \\\"Making the GitHub token setup script executable\\\", \\\"isBackground\\\": false}\"},\"type\":\"function\"}]},{\"role\":\"tool\",\"content\":\"(empty)\",\"tool_call_id\":\"toolu_vrtx_01UvdZQfbBht8qTWSbsdtvje\"},{\"role\":\"user\",\"content\":\"<userPrompt>\\n@agent Pause: \\\"Continue to iterate?\\\"\\n</userPrompt>\",\"copilot_cache_control\":{\"type\":\"ephemeral\"}},{\"role\":\"user\",\"content\":\"<attachments>\\n<attachment id=\\\"file:check.py\\\">\\nUser's current visible code, this should be the main focus:\\nExcerpt from check.py, lines 54 to 97:\\n```python\\n# filepath: /home/ashwin/Desktop/thinking-twice-website/server/contextfort-demo/check.py\\n# Second pass: filter messages based on trust\\n        for msg in self.messages:\\n            if msg.get('role') == 'user':\\n                trusted_messages.append(msg)\\n            elif msg.get('role') == 'system':\\n                trusted_messages.append(msg)\\n            elif msg.get('role') == 'tool':\\n                # Only include tool responses from trusted tools\\n                tool_call_id = msg.get('tool_call_id')\\n                if tool_call_id in tool_call_map:\\n                    tool_name = tool_call_map[tool_call_id]\\n                    if tool_name in trusted_tools:\\n                        trusted_messages.append(msg)\\n        return trusted_messages\\n\\n\\nclass SecurityChecker:\\n    def __init__(self, model_path: str = './models/Llama-3.2-1B', trusted_tools: List[str] = []):\\n        self.model_path = model_path\\n        self.trusted_tools = trusted_tools\\n        \\n        # Check if this is an OpenAI model\\n        self.is_openai_model = model_path.startswith('gpt-') or model_path.startswith('o1-')\\n        \\n        if self.is_openai_model:\\n            print(f\\\"Using OpenAI model: {model_path}\\\")\\n            self.openai_client = OpenAI(http_client=httpx.Client(verify=False))\\n\\n            self.tokenizer = None\\n            self.model = None\\n        else:\\n            pass\\n            # Load model and tokenizer from local path\\n            # print(f\\\"Loading model from local path: {model_path}\\\")\\n            # self.tokenizer = AutoTokenizer.from_pretrained(model_path, local_files_only=True)\\n            # self.model = AutoModelForCausalLM.from_pretrained(\\n            #     model_path, \\n            #     local_files_only=True,\\n            #     torch_dtype=torch.float16,\\n            #     device_map=\\\"auto\\\"\\n            # )\\n                \\n            # if self.tokenizer.pad_token is None:\\n```\\n</attachment>\\n<attachment>\\nUser's active file for additional context:\\n```python\\n# filepath: /home/ashwin/Desktop/thinking-twice-website/server/contextfort-demo/check.py\\nfrom typing import List, Dict, Any, Optional\\nimport json\\n# from transformers import AutoTokenizer, AutoModelForCausalLM\\n# import torch\\nfrom openai import OpenAI\\nimport httpx\\n\\n\\n\\n\\nclass ToolCall:\\n    def __init__(self, id: str, function_name: str, arguments: str, type: str = \\\"function\\\"):\\n        self.id = id\\n        self.function_name = function_name\\n        self.arguments = arguments\\n        self.type = type\\n    \\n    @classmethod\\n    def from_dict(cls, tool_call_dict: Dict[str, Any]) -> 'ToolCall':\\n        return cls(\\n            id=tool_call_dict['id'],\\n            function_name=tool_call_dict['function']['name'],\\n            arguments=tool_call_dict['function']['arguments'],\\n            type=tool_call_dict.get('type', 'function')\\n        )\\n\\n\\nclass Context:\\n    def __init__(self, messages: List[Dict[str, Any]]):\\n        self.messages = messages\\n    \\n    def get_last_tool_calls(self) -> Optional[ToolCall]:\\n        for message in reversed(self.messages):\\n            if message.get('role') == 'assistant' and 'tool_calls' in message:\\n                tool_calls = message['tool_calls']\\n                return [ToolCall.from_dict(tool_call) for tool_call in tool_calls]\\n        return None\\n    \\n    def get_user_messages(self) -> List[Dict[str, Any]]:\\n        return [msg for msg in self.messages if msg.get('role') == 'user']\\n    \\n    def get_trusted_messages(self, trusted_tools: List[str]) -> List[Dict[str, Any]]:\\n        trusted_messages = []\\n        tool_call_map = {}  # Map tool_call_id to tool name\\n        \\n        # First pass: build map of tool calls to their names\\n        for msg in self.messages:\\n            if msg.get('role') == 'assistant' and 'tool_calls' in msg:\\n                for tool_call in msg.get('tool_calls', []):\\n                    tool_call_id = tool_call.get('id')\\n                    tool_name = tool_call.get('function', {}).get('name')\\n                    if tool_call_id and tool_name:\\n                        tool_call_map[tool_call_id] = tool_name\\n        \\n        # Second pass: filter messages based on trust\\n        for msg in self.messages:\\n            if msg.get('role') == 'user':\\n                trusted_messages.append(msg)\\n            elif msg.get('role') == 'system':\\n                trusted_messages.append(msg)\\n            elif msg.get('role') == 'tool':\\n                # Only include tool responses from trusted tools\\n                tool_call_id = msg.get('tool_call_id')\\n                if tool_call_id in tool_call_map:\\n                    tool_name = tool_call_map[tool_call_id]\\n                    if tool_name in trusted_tools:\\n                        trusted_messages.append(msg)\\n        return trusted_messages\\n\\n\\nclass SecurityChecker:\\n    def __init__(self, model_path: str = './models/Llama-3.2-1B', trusted_tools: List[str] = []):\\n        self.model_path = model_path\\n        self.trusted_tools = trusted_tools\\n        \\n        # Check if this is an OpenAI model\\n        self.is_openai_model = model_path.startswith('gpt-') or model_path.startswith('o1-')\\n        \\n        if self.is_openai_model:\\n            print(f\\\"Using OpenAI model: {model_path}\\\")\\n            self.openai_client = OpenAI(http_client=httpx.Client(verify=False))\\n\\n            self.tokenizer = None\\n            self.model = None\\n        else:\\n            pass\\n            # Load model and tokenizer from local path\\n            # print(f\\\"Loading model from local path: {model_path}\\\")\\n            # self.tokenizer = AutoTokenizer.from_pretrained(model_path, local_files_only=True)\\n            # self.model = AutoModelForCausalLM.from_pretrained(\\n            #     model_path, \\n            #     local_files_only=True,\\n            #     torch_dtype=torch.float16,\\n            #     device_map=\\\"auto\\\"\\n            # )\\n                \\n            # if self.tokenizer.pad_token is None:\\n            #     self.tokenizer.pad_token = self.tokenizer.eos_token\\n            # self.openai_client = None\\n\\n    def _query_openai_model(self, query: str) -> bool:\\n        try:\\n            response = self.openai_client.chat.completions.create(\\n                model=self.model_path,\\n                messages=[\\n                    {\\\"role\\\": \\\"system\\\", \\\"content\\\": \\\"You are a security checker. Respond with only 'True' or 'False'.\\\"},\\n                    {\\\"role\\\": \\\"user\\\", \\\"content\\\": query}\\n                ],\\n                max_tokens=10,\\n                temperature=0.1\\n            )\\n            \\n            response_text = response.choices[0].message.content.strip()\\n            \\n            if \\\"true\\\" in response_text.lower():\\n                return True\\n            return False\\n            \\n        except Exception as e:\\n            print(f\\\"Error querying OpenAI model: {e}\\\")\\n            return False\\n\\n    def _query_model(self, query: str) -> bool:\\n        if self.is_openai_model:\\n            return self._query_openai_model(query)\\n        else:\\n            return self._query_local_model(query)\\n    \\n    def _query_local_model(self, query: str) -> bool:\\n        pass\\n        # Tokenize input\\n        inputs = self.tokenizer.encode(query, return_tensors='pt', max_length=512, truncation=True)\\n        \\n        # Generate response\\n        with torch.no_grad():\\n            outputs = self.model.generate(\\n                inputs,\\n                max_new_tokens=50,\\n                temperature=0.1,\\n                do_sample=True,\\n                pad_token_id=self.tokenizer.eos_token_id\\n            )\\n        \\n        # Decode response\\n        response = self.tokenizer.decode(outputs[0][inputs.shape[1]:], skip_special_tokens=True)\\n        response = response.strip()\\n        \\n        # For boolean responses, check if response contains \\\"true\\\" or \\\"false\\\"\\n        if \\\"true\\\" in response.lower():\\n            return True\\n        return False\\n\\n    def alpha_check(self, context: Context) -> bool:\\n        \\\"\\\"\\\"Check if tool call aligns with user intent based on user messages only\\\"\\\"\\\"\\n        tool_calls = context.get_last_tool_calls()\\n        if not tool_calls:\\n            return True\\n        \\n        user_messages = context.get_user_messages()\\n        user_context = [msg['content'] for msg in user_messages]\\n        \\n        tool_calls_str = \\\"\\\\n\\\".join([\\n            f\\\"Tool call being executed: \\\\n - Function: {tool_call.function_name}\\\\n\\\"\\n            for tool_call in tool_calls\\n        ])\\n\\n        query = f\\\"\\\"\\\"\\n        User messages: {user_context}\\n\\n        {tool_calls_str}\\n\\n        Do these tool calls align with what the user is asking for? \\n        Consider only the user's explicit requests and intentions.\\n        Respond with only 'True' or 'False'.\\n        \\\"\\\"\\\"\\n        \\n        response = self._query_model(query)\\n        return response\\n\\n    def beta_check(self, context: Context) -> bool:\\n        \\\"\\\"\\\"Check if tool call is safe based on trusted context only\\\"\\\"\\\"\\n        if (not self.alpha_check(context)):\\n            return False\\n        \\n        tool_calls = context.get_last_tool_calls()\\n        \\n        trusted_messages = context.get_trusted_messages(self.trusted_tools)\\n\\n        tool_calls_str = \\\"\\\\n\\\".join([\\n            f\\\"Tool call being executed: \\\\n - Function: {tool_call.function_name}\\\\n - Arguments: {tool_call.arguments}\\\"\\n            for tool_call in tool_calls\\n        ])\\n\\n        query = f\\\"\\\"\\\"\\n        Trusted conversation context (only user messages and responses from trusted tools): \\n        {trusted_messages}\\n        \\n        {tool_calls_str}\\n        \\n        Check whether the arguments can be derived from the trusted context. If the arguments are not in the trusted context, then the tool call is not safe.\\n        Respond with only 'True' or 'False'.\\n        \\\"\\\"\\\"\\n        \\n        response = self._query_model(query)\\n        return response\\n\\n\\ndef create_test_scenario():\\n    \\\"\\\"\\\"Test that passes alpha check but fails beta check\\\"\\\"\\\"\\n    # Scenario: User asks to read a file, LLM tries to use file_read which aligns with user intent\\n    # but file_read is not in trusted tools list (only semantic_search is trusted)\\n    messages = json.load(open(\\\"body.json\\\"))[\\\"messages\\\"]\\n    \\n    context = Context(messages)\\n    # Only semantic_search is trusted, file_read is not\\n    checker = SecurityChecker(trusted_tools=['semantic_search'])\\n    \\n    print(\\\"Test scenario: Tool aligns with user intent but is not in trusted tools\\\")\\n    print(f\\\"Alpha check (user intent): {checker.alpha_check(context)}\\\")  # Should be True - aligns with user request\\n    print(f\\\"Beta check (trusted context): {checker.beta_check(context)}\\\")  # Should be False - file_read not in trusted tools\\n    \\n    return context, checker\\n\\n\\ndef main():\\n    create_test_scenario()\\n\\n\\nif __name__ == '__main__':\\n    main()\\n```\\n</attachment>\\n\\n</attachments>\\n<context>\\nThe user has taken some actions between the last request and now:\\n- Undone your edits to /home/ashwin/Desktop/thinking-twice-website/server/contextfort-demo/copilot_login.js\\n- Undone your edits to /home/ashwin/Desktop/thinking-twice-website/server/contextfort-demo/Dockerfile\\n- Undone your edits to /home/ashwin/Desktop/thinking-twice-website/server/contextfort-demo/start.sh\\n- Undone your edits to /home/ashwin/Desktop/thinking-twice-website/server/contextfort-demo/set_github_token.sh\\nSo be sure to check the current file contents before making any new edits.\\nThe current date is 7 June 2025.\\nMy current OS is: Linux\\nMy default shell is: \\\"bash\\\". When you generate terminal commands, please generate them correctly for this shell.\\nI am working in a workspace with the following folders:\\n- /home/ashwin/Desktop/thinking-twice-website/server/contextfort-demo \\nI am working in a workspace that has the following structure:\\n```\\ncheck.py\\ncopilot_login.js\\ncopilot_proxy.py\\ncopilot-chat-0.27.2.vsix\\ncopilotproxy-0.0.1.vsix\\nDockerfile\\nfly.toml\\nmcp_config.json\\nproxy_state_manager.py\\nREADME\\nreproduce_extension.sh\\nrequirements.txt\\nset_github_token.sh\\nstart.sh\\n__pycache__/\\n\\tcopilot_proxy.cpython-310.pyc\\ncopilotproxy/\\n\\teslint.config.mjs\\n\\tLICENSE\\n\\tpackage.json\\n\\tREADME.md\\n\\ttsconfig.json\\n\\tvsc-extension-quickstart.md\\n\\tsrc/\\n\\t\\tconfig.ts\\n\\t\\tdashboard.ts\\n\\t\\textension.ts\\n\\t\\ttest/\\n\\t\\t\\textension.test.ts\\n```\\nThis view of the workspace structure may be truncated. You can use tools to collect more context if needed.\\n</context>\\n<reminder>\\nWhen using the insert_edit_into_file tool, avoid repeating existing code, instead use a line comment with `...existing code...` to represent regions of unchanged code.\\nWhen using the replace_string_in_file tool, include 3-5 lines of unchanged code before and after the string you want to replace, to make it unambiguous which part of the file should be edited.\\n</reminder>\\n<userPrompt>\\nwhen i open fly.io app, the files i opened during a previous deploy are open, how i want a fresh build\\n</userPrompt>\",\"copilot_cache_control\":{\"type\":\"ephemeral\"}}],\"model\":\"claude-3.7-sonnet\",\"temperature\":0,\"top_p\":1,\"max_tokens\":16384,\"tools\":[{\"function\":{\"name\":\"semantic_search\",\"description\":\"Run a natural language search for relevant code or documentation comments from the user's current workspace. Returns relevant code snippets from the user's current workspace if it is large, or the full contents of the workspace if it is small.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"query\":{\"type\":\"string\",\"description\":\"The query to search the codebase for. Should contain all relevant context. Should ideally be text that might appear in the codebase, such as function names, variable names, or comments.\"}},\"required\":[\"query\"]}},\"type\":\"function\"},{\"function\":{\"name\":\"list_code_usages\",\"description\":\"Request to list all usages (references, definitions, implementations etc) of a function, class, method, variable etc. Use this tool when \\n1. Looking for a sample implementation of an interface or class\\n2. Checking how a function is used throughout the codebase.\\n3. Including and updating all usages when changing a function, method, or constructor\",\"parameters\":{\"type\":\"object\",\"properties\":{\"symbolName\":{\"type\":\"string\",\"description\":\"The name of the symbol, such as a function name, class name, method name, variable name, etc.\"},\"filePaths\":{\"type\":\"array\",\"description\":\"One or more file paths which likely contain the definition of the symbol. For instance the file which declares a class or function. This is optional but will speed up the invocation of this tool and improve the quality of its output.\",\"items\":{\"type\":\"string\"}}},\"required\":[\"symbolName\"]}},\"type\":\"function\"},{\"function\":{\"name\":\"get_vscode_api\",\"description\":\"Get relevant VS Code API references to answer questions about VS Code extension development. Use this tool when the user asks about VS Code APIs, capabilities, or best practices related to developing VS Code extensions. Use it in all VS Code extension development workspaces.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"query\":{\"type\":\"string\",\"description\":\"The query to search vscode documentation for. Should contain all relevant context.\"}},\"required\":[\"query\"]}},\"type\":\"function\"},{\"function\":{\"name\":\"file_search\",\"description\":\"Search for files in the workspace by glob pattern. This only returns the paths of matching files. Use this tool when you know the exact filename pattern of the files you're searching for. Glob patterns match from the root of the workspace folder. Examples:\\n- **/*.{js,ts} to match all js/ts files in the workspace.\\n- src/** to match all files under the top-level src folder.\\n- **/foo/**/*.js to match all js files under any foo folder in the workspace.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"query\":{\"type\":\"string\",\"description\":\"Search for files with names or paths matching this glob pattern.\"},\"maxResults\":{\"type\":\"number\",\"description\":\"The maximum number of results to return. Do not use this unless necessary, it can slow things down. By default, only some matches are returned. If you use this and don't see what you're looking for, you can try again with a more specific query or a larger maxResults.\"}},\"required\":[\"query\"]}},\"type\":\"function\"},{\"function\":{\"name\":\"grep_search\",\"description\":\"Do a text search in the workspace. Use this tool when you know the exact string you're searching for.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"query\":{\"type\":\"string\",\"description\":\"The pattern to search for in files in the workspace. Can be a regex or plain text pattern\"},\"isRegexp\":{\"type\":\"boolean\",\"description\":\"Whether the pattern is a regex. False by default.\"},\"includePattern\":{\"type\":\"string\",\"description\":\"Search files matching this glob pattern. Will be applied to the relative path of files within the workspace.\"}},\"required\":[\"query\"]}},\"type\":\"function\"},{\"function\":{\"name\":\"read_file\",\"description\":\"Read the contents of a file.\\n\\nYou must specify the line range you're interested in. If the file contents returned are insufficient for your task, you may call this tool again to retrieve more content.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"filePath\":{\"description\":\"The absolute path of the file to read.\",\"type\":\"string\"},\"startLineNumberBaseZero\":{\"type\":\"number\",\"description\":\"The line number to start reading from, 0-based.\"},\"endLineNumberBaseZero\":{\"type\":\"number\",\"description\":\"The inclusive line number to end reading at, 0-based.\"}},\"required\":[\"filePath\",\"startLineNumberBaseZero\",\"endLineNumberBaseZero\"]}},\"type\":\"function\"},{\"function\":{\"name\":\"list_dir\",\"description\":\"List the contents of a directory. Result will have the name of the child. If the name ends in /, it's a folder, otherwise a file\",\"parameters\":{\"type\":\"object\",\"properties\":{\"path\":{\"type\":\"string\",\"description\":\"The absolute path to the directory to list.\"}},\"required\":[\"path\"]}},\"type\":\"function\"},{\"function\":{\"name\":\"run_in_terminal\",\"description\":\"This tool allows you to execute shell commands in a persistent terminal session, preserving environment variables, working directory, and other context across multiple commands.\\n\\nCommand Execution:\\n- Supports chaining with && or ; (e.g., npm install && npm start).\\n- Supports multi-line commands \\n\\nDirectory Management:\\n- Use absolute paths to avoid navigation issues.\\n\\nProgram Execution:\\n- Supports Python, Node.js, and other executables.\\n- Install dependencies via pip, npm, etc.\\n\\nBackground Processes:\\n- For long-running tasks (e.g., servers), set isBackground=true.\\n- Returns a terminal ID for checking status and runtime later.\\n\\nImportant Notes:\\n- If the command may produce excessively large output, use head or tail to reduce the output.\\n- If a command may use a pager, you must something to disable it. For example, you can use `git --no-pager`. Otherwise you should add something like ` | cat`. Examples: git, less, man, etc.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"command\":{\"type\":\"string\",\"description\":\"The command to run in the terminal.\"},\"explanation\":{\"type\":\"string\",\"description\":\"A one-sentence description of what the command does. This will be shown to the user before the command is run.\"},\"isBackground\":{\"type\":\"boolean\",\"description\":\"Whether the command starts a background process. If true, the command will run in the background and you will not see the output. If false, the tool call will block on the command finishing, and then you will get the output. Examples of backgrond processes: building in watch mode, starting a server. You can check the output of a backgrond process later on by using get_terminal_output.\"}},\"required\":[\"command\",\"explanation\",\"isBackground\"]}},\"type\":\"function\"},{\"function\":{\"name\":\"get_terminal_output\",\"description\":\"Get the output of a terminal command previous started with run_in_terminal\",\"parameters\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\",\"description\":\"The ID of the terminal command output to check.\"}},\"required\":[\"id\"]}},\"type\":\"function\"},{\"function\":{\"name\":\"get_errors\",\"description\":\"Get any compile or lint errors in a code file. If the user mentions errors or problems in a file, they may be referring to these. Use the tool to see the same errors that the user is seeing. Also use this tool after editing a file to validate the change.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"filePaths\":{\"description\":\"The absolute paths to the files to check for errors.\",\"type\":\"array\",\"items\":{\"type\":\"string\"}}},\"required\":[\"filePaths\"]}},\"type\":\"function\"},{\"function\":{\"name\":\"get_changed_files\",\"description\":\"Get git diffs of current file changes in a git repository. Don't forget that you can use run_in_terminal to run git commands in a terminal as well.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"repositoryPath\":{\"type\":\"string\",\"description\":\"The absolute path to the git repository to look for changes in. If not provided, the active git repository will be used.\"},\"sourceControlState\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"enum\":[\"staged\",\"unstaged\",\"merge-conflicts\"]},\"description\":\"The kinds of git state to filter by. Allowed values are: 'staged', 'unstaged', and 'merge-conflicts'. If not provided, all states will be included.\"}}}},\"type\":\"function\"},{\"function\":{\"name\":\"test_failure\",\"description\":\"Includes test failure information in the prompt.\"},\"type\":\"function\"},{\"function\":{\"name\":\"run_tests\",\"description\":\"Runs unit tests in files. Use this tool if the user asks to run tests or when you want to validate changes using unit tests. When possible, always try to provide `files` paths containing the relevant unit tests in order to avoid unnecessarily long test runs.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"files\":{\"type\":\"array\",\"items\":{\"type\":\"string\"},\"description\":\"Test files to run. If not provided, all test files will be run.\"}}}},\"type\":\"function\"},{\"function\":{\"name\":\"get_terminal_selection\",\"description\":\"Get the user's current selection in the active terminal.\"},\"type\":\"function\"},{\"function\":{\"name\":\"get_terminal_last_command\",\"description\":\"Get the user's current selection in the active terminal.\"},\"type\":\"function\"},{\"function\":{\"name\":\"create_new_workspace\",\"description\":\"Get steps to help the user create any project in a VS Code workspace. Use this tool to help users set up new projects, including TypeScript-based projects, Model Context Protocol (MCP) servers, VS Code extensions, Next.js projects, Vite projects, or any other project.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"query\":{\"type\":\"string\",\"description\":\"The query to use to generate the new workspace. This should be a clear and concise description of the workspace the user wants to create.\"}},\"required\":[\"query\"]}},\"type\":\"function\"},{\"function\":{\"name\":\"create_and_run_task\",\"description\":\"For a workspace, this tool will create a task based on the package.json, README.md, and project structure so that the project can be built and run.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"workspaceFolder\":{\"type\":\"string\",\"description\":\"The absolute path of the workspace folder where the tasks.json file will be created.\"},\"task\":{\"type\":\"object\",\"description\":\"The task to add to the new tasks.json file.\",\"properties\":{\"label\":{\"type\":\"string\",\"description\":\"The label of the task.\"},\"type\":{\"type\":\"string\",\"description\":\"The type of the task. The only supported value is 'shell'.\",\"enum\":[\"shell\"]},\"command\":{\"type\":\"string\",\"description\":\"The shell command to run for the task. Use this to specify commands for building or running the application.\"},\"args\":{\"type\":\"array\",\"description\":\"The arguments to pass to the command.\",\"items\":{\"type\":\"string\"}},\"isBackground\":{\"type\":\"boolean\",\"description\":\"Whether the task runs in the background without blocking the UI or other tasks. Set to true for long-running processes like watch tasks or servers that should continue executing without requiring user attention. When false, the task will block the terminal until completion.\"},\"problemMatcher\":{\"type\":\"array\",\"description\":\"The problem matcher to use to parse task output for errors and warnings. Can be a predefined matcher like '$tsc' (TypeScript), '$eslint-stylish', '$gcc', etc., or a custom pattern defined in tasks.json. This helps VS Code display errors in the Problems panel and enables quick navigation to error locations.\",\"items\":{\"type\":\"string\"}},\"group\":{\"type\":\"string\",\"description\":\"The group to which the task belongs.\"}},\"required\":[\"label\",\"type\",\"command\"]}},\"required\":[\"task\",\"workspaceFolder\"]}},\"type\":\"function\"},{\"function\":{\"name\":\"get_project_setup_info\",\"description\":\"Do not call this tool without first calling the tool to create a workspace. This tool provides a project setup information for a Visual Studio Code workspace based on a project type and programming language.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"projectType\":{\"type\":\"string\",\"description\":\"The type of project to create. Supported values are: 'basic', 'mcp-server', 'model-context-protocol-server', 'vscode-extension', 'next-js', 'vite' and 'other'\"},\"language\":{\"type\":\"string\",\"description\":\"The programming language for the project. Supported: 'javascript', 'typescript', 'python' and 'other'.\"}},\"required\":[\"projectType\"]}},\"type\":\"function\"},{\"function\":{\"name\":\"install_extension\",\"description\":\"Install an extension in VS Code. Use this tool to install an extension in Visual Studio Code as part of a new workspace creation process only.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\",\"description\":\"The ID of the extension to install. This should be in the format <publisher>.<extension>.\"},\"name\":{\"type\":\"string\",\"description\":\"The name of the extension to install. This should be a clear and concise description of the extension.\"}},\"required\":[\"id\",\"name\"]}},\"type\":\"function\"},{\"function\":{\"name\":\"create_new_jupyter_notebook\",\"description\":\"Generates a new Jupyter Notebook (.ipynb) in VS Code. Jupyter Notebooks are interactive documents commonly used for data exploration, analysis, visualization, and combining code with narrative text. This tool should only be called when the user explicitly requests to create a new Jupyter Notebook.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"query\":{\"type\":\"string\",\"description\":\"The query to use to generate the jupyter notebook. This should be a clear and concise description of the notebook the user wants to create.\"}},\"required\":[\"query\"]}},\"type\":\"function\"},{\"function\":{\"name\":\"insert_edit_into_file\",\"description\":\"Insert new code into an existing file in the workspace. Use this tool once per file that needs to be modified, even if there are multiple changes for a file. Generate the \\\"explanation\\\" property first.\\nThe system is very smart and can understand how to apply your edits to the files, you just need to provide minimal hints.\\nAvoid repeating existing code, instead use comments to represent regions of unchanged code. Be as concise as possible. For example:\\n// ...existing code...\\n{ changed code }\\n// ...existing code...\\n{ changed code }\\n// ...existing code...\\n\\nHere is an example of how you should use format an edit to an existing Person class:\\nclass Person {\\n\\t// ...existing code...\\n\\tage: number;\\n\\t// ...existing code...\\n\\tgetAge() {\\n\\treturn this.age;\\n\\t}\\n}\",\"parameters\":{\"type\":\"object\",\"properties\":{\"explanation\":{\"type\":\"string\",\"description\":\"A short explanation of the edit being made.\"},\"filePath\":{\"type\":\"string\",\"description\":\"An absolute path to the file to edit.\"},\"code\":{\"type\":\"string\",\"description\":\"The code change to apply to the file.\\nThe system is very smart and can understand how to apply your edits to the files, you just need to provide minimal hints.\\nAvoid repeating existing code, instead use comments to represent regions of unchanged code. Be as concise as possible. For example:\\n// ...existing code...\\n{ changed code }\\n// ...existing code...\\n{ changed code }\\n// ...existing code...\\n\\nHere is an example of how you should use format an edit to an existing Person class:\\nclass Person {\\n\\t// ...existing code...\\n\\tage: number;\\n\\t// ...existing code...\\n\\tgetAge() {\\n\\t\\treturn this.age;\\n\\t}\\n}\"}},\"required\":[\"explanation\",\"filePath\",\"code\"]}},\"type\":\"function\"},{\"function\":{\"name\":\"create_file\",\"description\":\"This is a tool for creating a new file in the workspace. The file will be created with the specified content.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"filePath\":{\"type\":\"string\",\"description\":\"The absolute path to the file to create.\"},\"content\":{\"type\":\"string\",\"description\":\"The content to write to the file.\"}},\"required\":[\"filePath\",\"content\"]}},\"type\":\"function\"},{\"function\":{\"name\":\"open_simple_browser\",\"description\":\"Preview a website or open a URL in the editor's Simple Browser. Useful for quickly viewing locally hosted websites, demos, or resources without leaving the coding environment.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"url\":{\"type\":\"string\",\"description\":\"The website URL to preview or open in the Simple Browser inside the editor.\"}},\"required\":[\"url\"]}},\"type\":\"function\"},{\"function\":{\"name\":\"replace_string_in_file\",\"description\":\"This is a tool for making edits in an existing file in the workspace. For moving or renaming files, use run in terminal tool with the 'mv' command instead. For larger edits, split them into smaller edits and call the edit tool multiple times to ensure accuracy. Before editing, always use the read file tool to understand the file's contents and context. To edit a file, provide: 1) filePath (absolute path), 2) oldString (must exactly match, including whitespace and indentation, uniquely identifying a single occurrence), and 3) newString (replacement text). Each use of this tool replaces exactly ONE occurrence of oldString. CRITICAL REQUIREMENTS: ensure oldString uniquely identifies the change by including at least 3-5 lines of context both before and after the target text, preserving whitespace and indentation exactly. Never use ...existing code... comments in the oldString or newString. Edits must result in valid, idiomatic code and not leave the file broken!\",\"parameters\":{\"type\":\"object\",\"properties\":{\"filePath\":{\"type\":\"string\",\"description\":\"An absolute path to the file to edit.\"},\"oldString\":{\"type\":\"string\",\"description\":\"The string to be replaced in the file. If specified, newString must also be provided. Never use ...existing code... comments in the oldString.\"},\"newString\":{\"type\":\"string\",\"description\":\"The replacement string. If specified, oldString must also be provided.\"}},\"required\":[\"filePath\",\"oldString\",\"newString\"]}},\"type\":\"function\"},{\"function\":{\"name\":\"edit_notebook_file\",\"description\":\"This is a tool for editing an existing Notebook file in the workspace. Use this tool once per notebook file that needs to be modified by batching all of the edits, even if there are multiple changes for a notebook. Generate the \\\"explanation\\\" property first.\\nThe system is very smart and can understand how to apply your edits to the notebooks.\\nWhen updating the content of an existing cell, ensure newCode includes at least 3-5 lines of context both before and after the new changes, preserving whitespace and indentation exactly.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"filePath\":{\"type\":\"string\",\"description\":\"An absolute path to the notebook file to edit, or the URI of a untitled, not yet named, file, such as `untitled:Untitled-1.\"},\"explanation\":{\"type\":\"string\",\"description\":\"A one-sentence description of edit operation. This will be shown to the user before the tool is run.\"},\"edits\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"cellId\":{\"type\":\"string\",\"description\":\"Id of the cell that needs to be deleted or edited. Use the value `TOP`, `BOTTOM` when inserting a cell at the top or bottom of the notebook, else provide the id of the cell after which a new cell is to be inserted.\"},\"newCode\":{\"anyOf\":[{\"type\":\"string\",\"description\":\"The code for the new or existing cell to be edited. Code should not be wrapped within <VSCode.Cell> tags\"},{\"type\":\"array\",\"items\":{\"type\":\"string\",\"description\":\"The code for the new or existing cell to be edited. Code should not be wrapped within <VSCode.Cell> tags\"}}]},\"language\":{\"type\":\"string\",\"description\":\"The language of the cell. `markdown`, `python`, `javascript`, `julia`, etc.\"},\"editExplanation\":{\"type\":\"string\",\"description\":\"A one-sentence description of edit operation. This can be shown to the user before performing this edit operation.\"},\"editType\":{\"type\":\"string\",\"enum\":[\"insert\",\"delete\",\"edit\"],\"description\":\"The operation peformed on the cell, whether `insert`, `delete` or `edit`.\"}},\"required\":[\"editExplanation\",\"editType\"]}}},\"required\":[\"filePath\",\"explanation\",\"edits\"]}},\"type\":\"function\"},{\"function\":{\"name\":\"run_notebook_cell\",\"description\":\"This is a tool for running a code cell in a notebook file. The cell will be run in the context of the notebook, and the output of the final cell execution will be returned. Use this tool only when already working in a notebook file. Code cells can be run without making any edits, so do not edit the notebook unnecessarily when using this tool. Do not pass Markdown cells for execution as they cannot be executed.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"filePath\":{\"type\":\"string\",\"description\":\"An absolute path to the notebook file with the cell to run, or the URI of a untitled, not yet named, file, such as `untitled:Untitled-1.ipynb\"},\"reason\":{\"type\":\"string\",\"description\":\"A one-sentence description of why the run is being requested. This will be shown to the user before the tool is run.\"},\"cellIds\":{\"type\":\"array\",\"description\":\"A list of IDs for code cells to execute. If a markdown cell is provided, nothing will be executed.\",\"items\":{\"type\":\"string\"}},\"continueOnError\":{\"type\":\"boolean\",\"description\":\"Whether or not execution should continue for remaining cells if an error is encountered. Default to false unless instructed otherwise.\"}},\"required\":[\"filePath\",\"reason\",\"cellIds\"]}},\"type\":\"function\"},{\"function\":{\"name\":\"fetch_webpage\",\"description\":\"Fetches the main content from a web page. This tool is useful for summarizing or analyzing the content of a webpage. You should use this tool when you think the user is looking for information from a specific webpage.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"urls\":{\"type\":\"array\",\"items\":{\"type\":\"string\"},\"description\":\"An array of URLs to fetch content from.\"},\"query\":{\"type\":\"string\",\"description\":\"The query to search for in the web page's content. This should be a clear and concise description of the content you want to find.\"}},\"required\":[\"urls\",\"query\"]}},\"type\":\"function\"},{\"function\":{\"name\":\"test_search\",\"description\":\"For a source code file, find the file that contains the tests. For a test file find the file that contains the code under test.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"filePaths\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}}},\"required\":[\"filePaths\"]}},\"type\":\"function\"},{\"function\":{\"name\":\"get_search_view_results\",\"description\":\"The results from the search view\"},\"type\":\"function\"},{\"function\":{\"name\":\"github_repo\",\"description\":\"Searches a GitHub repository for relevant source code snippets. Only use this tool if the user is very clearly asking for code snippets from a specific GitHub repository. Do not use this tool for Github repos that the user has open in their workspace.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"repo\":{\"type\":\"string\",\"description\":\"The name of the Github repository to search for code in. Should must be formatted as '<owner>/<repo>'.\"},\"query\":{\"type\":\"string\",\"description\":\"The query to search for repo. Should contain all relevant context.\"}},\"required\":[\"repo\",\"query\"]}},\"type\":\"function\"},{\"function\":{\"name\":\"vscode_searchExtensions_internal\",\"description\":\"This is a tool for browsing Visual Studio Code Extensions Marketplace. It allows the model to search for extensions and retrieve detailed information about them. The model should use this tool whenever it needs to discover extensions or resolve information about known ones. To use the tool, the model has to provide the category of the extensions, relevant search keywords, or known extension IDs. Note that search results may include false positives, so reviewing and filtering is recommended.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"category\":{\"type\":\"string\",\"description\":\"The category of extensions to search for\",\"enum\":[\"AI\",\"Azure\",\"Chat\",\"Data Science\",\"Debuggers\",\"Extension Packs\",\"Education\",\"Formatters\",\"Keymaps\",\"Language Packs\",\"Linters\",\"Machine Learning\",\"Notebooks\",\"Programming Languages\",\"SCM Providers\",\"Snippets\",\"Testing\",\"Themes\",\"Visualization\",\"Other\"]},\"keywords\":{\"type\":\"array\",\"items\":{\"type\":\"string\"},\"description\":\"The keywords to search for\"},\"ids\":{\"type\":\"array\",\"items\":{\"type\":\"string\"},\"description\":\"The ids of the extensions to search for\"}}}},\"type\":\"function\"},{\"function\":{\"name\":\"bb7_add_issue_comment\",\"description\":\"Add a comment to an existing issue\",\"parameters\":{\"type\":\"object\",\"properties\":{\"owner\":{\"type\":\"string\"},\"repo\":{\"type\":\"string\"},\"issue_number\":{\"type\":\"number\"},\"body\":{\"type\":\"string\"}},\"required\":[\"owner\",\"repo\",\"issue_number\",\"body\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}},\"type\":\"function\"},{\"function\":{\"name\":\"bb7_addCommentToJiraIssue\",\"description\":\"Adds a comment to an existing Jira issue id or key.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"cloudId\":{\"type\":\"string\",\"description\":\"Unique identifier for an Atlassian Cloud instance in the form of a UUID. Can also be a site URL. If not working, use the 'getAccessibleAtlassianResources' tool to find accessible Cloud IDs.\"},\"issueIdOrKey\":{\"type\":\"string\",\"description\":\"Issue id or key can be used to uniquely identify an existing issue.\\nIssue id is a numerical identifier. An example issue id is 10000.\\nIssue key is formatted as a project key followed by a hyphen '-' character and then followed by a sequential number.\\nAn example issue key is ISSUE-1.\"},\"commentBody\":{\"type\":\"string\",\"description\":\"The content of the comment in Markdown format.\"},\"commentVisibility\":{\"type\":\"object\",\"properties\":{\"type\":{\"type\":\"string\",\"enum\":[\"group\",\"role\"],\"description\":\"Whether visibility of this comment is restricted to a group or role.\"},\"value\":{\"type\":\"string\",\"description\":\"The name of the group or role that visibility of this comment is restricted to.\"}},\"required\":[\"type\",\"value\"],\"additionalProperties\":false}},\"required\":[\"cloudId\",\"issueIdOrKey\",\"commentBody\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}},\"type\":\"function\"},{\"function\":{\"name\":\"bb7_atlassianUserInfo\",\"description\":\"Get current user info from Atlassian\",\"parameters\":{\"type\":\"object\",\"properties\":{},\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}},\"type\":\"function\"},{\"function\":{\"name\":\"bb7_create_branch\",\"description\":\"Create a new branch in a GitHub repository\",\"parameters\":{\"type\":\"object\",\"properties\":{\"owner\":{\"type\":\"string\",\"description\":\"Repository owner (username or organization)\"},\"repo\":{\"type\":\"string\",\"description\":\"Repository name\"},\"branch\":{\"type\":\"string\",\"description\":\"Name for the new branch\"},\"from_branch\":{\"type\":\"string\",\"description\":\"Optional: source branch to create from (defaults to the repository's default branch)\"}},\"required\":[\"owner\",\"repo\",\"branch\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}},\"type\":\"function\"},{\"function\":{\"name\":\"bb7_create_issue\",\"description\":\"Create a new issue in a GitHub repository\",\"parameters\":{\"type\":\"object\",\"properties\":{\"owner\":{\"type\":\"string\"},\"repo\":{\"type\":\"string\"},\"title\":{\"type\":\"string\"},\"body\":{\"type\":\"string\"},\"assignees\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"milestone\":{\"type\":\"number\"},\"labels\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}}},\"required\":[\"owner\",\"repo\",\"title\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}},\"type\":\"function\"},{\"function\":{\"name\":\"bb7_create_or_update_file\",\"description\":\"Create or update a single file in a GitHub repository\",\"parameters\":{\"type\":\"object\",\"properties\":{\"owner\":{\"type\":\"string\",\"description\":\"Repository owner (username or organization)\"},\"repo\":{\"type\":\"string\",\"description\":\"Repository name\"},\"path\":{\"type\":\"string\",\"description\":\"Path where to create/update the file\"},\"content\":{\"type\":\"string\",\"description\":\"Content of the file\"},\"message\":{\"type\":\"string\",\"description\":\"Commit message\"},\"branch\":{\"type\":\"string\",\"description\":\"Branch to create/update the file in\"},\"sha\":{\"type\":\"string\",\"description\":\"SHA of the file being replaced (required when updating existing files)\"}},\"required\":[\"owner\",\"repo\",\"path\",\"content\",\"message\",\"branch\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}},\"type\":\"function\"},{\"function\":{\"name\":\"bb7_create_pull_request\",\"description\":\"Create a new pull request in a GitHub repository\",\"parameters\":{\"type\":\"object\",\"properties\":{\"owner\":{\"type\":\"string\",\"description\":\"Repository owner (username or organization)\"},\"repo\":{\"type\":\"string\",\"description\":\"Repository name\"},\"title\":{\"type\":\"string\",\"description\":\"Pull request title\"},\"body\":{\"type\":\"string\",\"description\":\"Pull request body/description\"},\"head\":{\"type\":\"string\",\"description\":\"The name of the branch where your changes are implemented\"},\"base\":{\"type\":\"string\",\"description\":\"The name of the branch you want the changes pulled into\"},\"draft\":{\"type\":\"boolean\",\"description\":\"Whether to create the pull request as a draft\"},\"maintainer_can_modify\":{\"type\":\"boolean\",\"description\":\"Whether maintainers can modify the pull request\"}},\"required\":[\"owner\",\"repo\",\"title\",\"head\",\"base\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}},\"type\":\"function\"},{\"function\":{\"name\":\"bb7_create_pull_request_review\",\"description\":\"Create a review on a pull request\",\"parameters\":{\"type\":\"object\",\"properties\":{\"owner\":{\"type\":\"string\",\"description\":\"Repository owner (username or organization)\"},\"repo\":{\"type\":\"string\",\"description\":\"Repository name\"},\"pull_number\":{\"type\":\"number\",\"description\":\"Pull request number\"},\"commit_id\":{\"type\":\"string\",\"description\":\"The SHA of the commit that needs a review\"},\"body\":{\"type\":\"string\",\"description\":\"The body text of the review\"},\"event\":{\"type\":\"string\",\"enum\":[\"APPROVE\",\"REQUEST_CHANGES\",\"COMMENT\"],\"description\":\"The review action to perform\"},\"comments\":{\"type\":\"array\",\"items\":{\"anyOf\":[{\"type\":\"object\",\"properties\":{\"path\":{\"type\":\"string\",\"description\":\"The relative path to the file being commented on\"},\"position\":{\"type\":\"number\",\"description\":\"The position in the diff where you want to add a review comment\"},\"body\":{\"type\":\"string\",\"description\":\"Text of the review comment\"}},\"required\":[\"path\",\"position\",\"body\"],\"additionalProperties\":false},{\"type\":\"object\",\"properties\":{\"path\":{\"type\":\"string\",\"description\":\"The relative path to the file being commented on\"},\"line\":{\"type\":\"number\",\"description\":\"The line number in the file where you want to add a review comment\"},\"body\":{\"type\":\"string\",\"description\":\"Text of the review comment\"}},\"required\":[\"path\",\"line\",\"body\"],\"additionalProperties\":false}]},\"description\":\"Comments to post as part of the review (specify either position or line, not both)\"}},\"required\":[\"owner\",\"repo\",\"pull_number\",\"body\",\"event\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}},\"type\":\"function\"},{\"function\":{\"name\":\"bb7_create_repository\",\"description\":\"Create a new GitHub repository in your account\",\"parameters\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\",\"description\":\"Repository name\"},\"description\":{\"type\":\"string\",\"description\":\"Repository description\"},\"private\":{\"type\":\"boolean\",\"description\":\"Whether the repository should be private\"},\"autoInit\":{\"type\":\"boolean\",\"description\":\"Initialize with README.md\"}},\"required\":[\"name\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}},\"type\":\"function\"},{\"function\":{\"name\":\"bb7_createCompassComponent\",\"description\":\"Create a new Compass component\",\"parameters\":{\"type\":\"object\",\"properties\":{\"cloudId\":{\"type\":\"string\",\"description\":\"Unique identifier for an Atlassian Cloud instance in the form of a UUID. Can also be a site URL. If not working, use the 'getAccessibleAtlassianResources' tool to find accessible Cloud IDs.\"},\"name\":{\"type\":\"string\",\"description\":\"The name of the component\"},\"description\":{\"type\":\"string\",\"description\":\"The description of the component\"},\"lifecycleStage\":{\"anyOf\":[{\"type\":\"string\",\"enum\":[\"Pre-release\",\"Active\",\"Deprecated\"],\"description\":\"A string value denoting the lifecycle stage of the component. This is never an object.\"},{\"type\":\"null\"}],\"description\":\"A string value denoting the lifecycle stage of the component. This is never an object.\"},\"tier\":{\"type\":[\"number\",\"null\"],\"description\":\"The tier of the component (1-4)\"},\"typeId\":{\"type\":\"string\",\"description\":\"The type ID of the component. Default types: SERVICE, LIBRARY, APPLICATION, CAPABILITY, CLOUD_RESOURCE, DATA_PIPELINE, MACHINE_LEARNING_MODEL, UI_ELEMENT, WEBSITE, TEMPLATE, DATASET, DATA_PRODUCT, DASHBOARD\"},\"customFields\":{\"type\":\"object\",\"additionalProperties\":{\"type\":[\"string\",\"number\"]},\"description\":\"The custom fields of the component as a map of field ID to field value. If the field is a single select or multi select, the value should be the ID of the option.\"}},\"required\":[\"cloudId\",\"name\",\"typeId\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}},\"type\":\"function\"},{\"function\":{\"name\":\"bb7_createCompassComponentRelationship\",\"description\":\"Create a relationship between two Compass components\",\"parameters\":{\"type\":\"object\",\"properties\":{\"fromComponentId\":{\"type\":\"string\",\"description\":\"The ID of the source component\"},\"toComponentId\":{\"type\":\"string\",\"description\":\"The ID of the target component\"},\"relationshipType\":{\"type\":\"string\",\"enum\":[\"DEPENDS_ON\",\"CONTAINS\",\"CONNECTS_TO\",\"IMPLEMENTS\",\"REPORTS_TO\"],\"description\":\"The type of relationship to create\"}},\"required\":[\"fromComponentId\",\"toComponentId\",\"relationshipType\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}},\"type\":\"function\"},{\"function\":{\"name\":\"bb7_createCompassCustomFieldDefinition\",\"description\":\"Create a new Compass custom field definition\",\"parameters\":{\"type\":\"object\",\"properties\":{\"cloudId\":{\"type\":\"string\",\"description\":\"Unique identifier for an Atlassian Cloud instance in the form of a UUID. Can also be a site URL. If not working, use the 'getAccessibleAtlassianResources' tool to find accessible Cloud IDs.\"},\"name\":{\"type\":\"string\",\"description\":\"The name of the custom field definition\"},\"description\":{\"type\":\"string\",\"description\":\"The description of the custom field definition\"},\"componentTypeIds\":{\"type\":\"array\",\"items\":{\"type\":\"string\"},\"description\":\"The type ID of the components the custom field definition will be added to\"},\"type\":{\"type\":\"string\",\"enum\":[\"Boolean\",\"MultiSelect\",\"Number\",\"SingleSelect\",\"Text\",\"User\"],\"description\":\"The type of the custom field definition\"},\"fieldSelections\":{\"anyOf\":[{\"type\":\"object\",\"additionalProperties\":{\"type\":\"null\"},\"description\":\"An list of options for the custom field definition, expressed as maps. The keys should be the options, and the values should all be null. Only used for SingleSelect and MultiSelect custom field definitions.\"},{\"type\":\"null\"}],\"description\":\"An list of options for the custom field definition, expressed as maps. The keys should be the options, and the values should all be null. Only used for SingleSelect and MultiSelect custom field definitions.\"}},\"required\":[\"cloudId\",\"name\",\"description\",\"componentTypeIds\",\"type\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}},\"type\":\"function\"},{\"function\":{\"name\":\"bb7_createConfluenceFooterComment\",\"description\":\"Create a footer comment on a Confluence page or blog post\",\"parameters\":{\"type\":\"object\",\"properties\":{\"cloudId\":{\"type\":\"string\",\"description\":\"Unique identifier for an Atlassian Cloud instance in the form of a UUID. Can also be a site URL. If not working, use the 'getAccessibleAtlassianResources' tool to find accessible Cloud IDs.\"},\"pageId\":{\"type\":\"string\",\"description\":\"The id of the page to add the comment to.\"},\"parentCommentId\":{\"type\":\"string\",\"description\":\"The id of the parent comment to reply to.\"},\"attachmentId\":{\"type\":\"string\",\"description\":\"The id of the attachment to add to the comment.\"},\"customContentId\":{\"type\":\"string\",\"description\":\"The id of the custom content to add to the comment.\"},\"body\":{\"type\":\"string\",\"description\":\"The content of the comment in Markdown format.\"}},\"required\":[\"cloudId\",\"body\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}},\"type\":\"function\"},{\"function\":{\"name\":\"bb7_createConfluenceInlineComment\",\"description\":\"Create an inline comment on a page or blog post\",\"parameters\":{\"type\":\"object\",\"properties\":{\"cloudId\":{\"type\":\"string\",\"description\":\"Unique identifier for an Atlassian Cloud instance in the form of a UUID. Can also be a site URL. If not working, use the 'getAccessibleAtlassianResources' tool to find accessible Cloud IDs.\"},\"pageId\":{\"type\":\"string\",\"description\":\"The id of the page to add the comment to.\"},\"parentCommentId\":{\"type\":\"string\",\"description\":\"The id of the parent comment to reply to.\"},\"body\":{\"type\":\"string\",\"description\":\"The content of the comment in Markdown format.\"},\"inlineCommentProperties\":{\"type\":\"object\",\"properties\":{\"textSelection\":{\"type\":\"string\",\"description\":\"The text to highlight\"},\"textSelectionMatchCount\":{\"type\":\"number\",\"description\":\"The number of matches for the selected text on the page (should be strictly greater than textSelectionMatchIndex)\"},\"textSelectionMatchIndex\":{\"type\":\"number\",\"description\":\"The match index to highlight. This is zero-based. E.g. if you have 3 occurrences of \\\"hello world\\\" on a page and you want to highlight the second occurrence, you should pass 1 for textSelectionMatchIndex and 3 for textSelectionMatchCount.\"}},\"required\":[\"textSelection\",\"textSelectionMatchCount\",\"textSelectionMatchIndex\"],\"additionalProperties\":false,\"description\":\"Object describing the text to highlight on the page/blog post. Only applicable for top level inline comments (not replies) and required in that case.\"}},\"required\":[\"cloudId\",\"body\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}},\"type\":\"function\"},{\"function\":{\"name\":\"bb7_createConfluencePage\",\"description\":\"Create a new page in Confluence\",\"parameters\":{\"type\":\"object\",\"properties\":{\"cloudId\":{\"type\":\"string\",\"description\":\"Unique identifier for an Atlassian Cloud instance in the form of a UUID. Can also be a site URL. If not working, use the 'getAccessibleAtlassianResources' tool to find accessible Cloud IDs.\"},\"spaceId\":{\"type\":\"string\"},\"title\":{\"type\":\"string\"},\"parentId\":{\"type\":\"string\"},\"body\":{\"type\":\"string\",\"description\":\"The content of the page. You **MUST** use markdown format.\"},\"isPrivate\":{\"type\":\"boolean\",\"description\":\"The page will be private. Only the user who creates this page will have permission to view and edit one.\"}},\"required\":[\"cloudId\",\"spaceId\",\"body\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}},\"type\":\"function\"},{\"function\":{\"name\":\"bb7_createJiraIssue\",\"description\":\"Create a new Jira issue in a given project with a given issue type.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"cloudId\":{\"type\":\"string\",\"description\":\"Unique identifier for an Atlassian Cloud instance in the form of a UUID. Can also be a site URL. If not working, use the 'getAccessibleAtlassianResources' tool to find accessible Cloud IDs.\"},\"projectKey\":{\"type\":\"string\",\"description\":\"A project key in Jira is a unique identifier (a string of letters, numbers and sometimes underscores) of a project.\\n      There is a tool \\\"getVisibleJiraProjects\\\" to look up which projects the user has create permission to create a new Jira issue.\"},\"issueTypeName\":{\"type\":\"string\",\"description\":\"A Jira issue type categorizes and  distinguishes different kinds of work being tracked within a project.\\n      It's a way to define what a specific piece of work represents.\\n      For example, in a Jira Software project, there are \\\"Epic\\\", \\\"Story\\\", \\\"Task\\\", \\\"Bug\\\" or \\\"Subtask\\\" issue types by default.\\n      Or in Jira Service Management, there are \\\"Change\\\", \\\"IT help\\\", \\\"Incident\\\", \\\"New feature\\\", \\\"Problem\\\", \\\"Service request\\\", \\\"Service request with approval\\\" or \\\"Support\\\" issue types by default.\\n      User can remove those default ones and/or define their own issue types as well.\\n      There is a tool \\\"getJiraProjectIssueTypesMetadata\\\" to get the available issue types in a given project.\"},\"summary\":{\"type\":\"string\"},\"description\":{\"type\":\"string\",\"description\":\"The content of the issue's description in Markdown format.\"},\"assignee_account_id\":{\"type\":\"string\",\"description\":\"During issue creation, we can set an assignee for the new issue.\\n      The input must be an account id of a valid user in the given cloud id.\\n      There is a tool \\\"atlassianUserInfo\\\" to get the account id of the current user.\\n      There is a tool \\\"lookupJiraAccountId\\\" to get the account ids of the existing users in Jira based on the user's display name or email address.\"},\"additional_fields\":{\"type\":\"object\",\"additionalProperties\":{}}},\"required\":[\"cloudId\",\"projectKey\",\"issueTypeName\",\"summary\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}},\"type\":\"function\"},{\"function\":{\"name\":\"bb7_editJiraIssue\",\"description\":\"Update the details of an existing Jira issue id or key.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"cloudId\":{\"type\":\"string\",\"description\":\"Unique identifier for an Atlassian Cloud instance in the form of a UUID. Can also be a site URL. If not working, use the 'getAccessibleAtlassianResources' tool to find accessible Cloud IDs.\"},\"issueIdOrKey\":{\"type\":\"string\",\"description\":\"Issue id or key can be used to uniquely identify an existing issue.\\nIssue id is a numerical identifier. An example issue id is 10000.\\nIssue key is formatted as a project key followed by a hyphen '-' character and then followed by a sequential number.\\nAn example issue key is ISSUE-1.\"},\"fields\":{\"type\":\"object\",\"additionalProperties\":{}}},\"required\":[\"cloudId\",\"issueIdOrKey\",\"fields\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}},\"type\":\"function\"},{\"function\":{\"name\":\"bb7_fork_repository\",\"description\":\"Fork a GitHub repository to your account or specified organization\",\"parameters\":{\"type\":\"object\",\"properties\":{\"owner\":{\"type\":\"string\",\"description\":\"Repository owner (username or organization)\"},\"repo\":{\"type\":\"string\",\"description\":\"Repository name\"},\"organization\":{\"type\":\"string\",\"description\":\"Optional: organization to fork to (defaults to your personal account)\"}},\"required\":[\"owner\",\"repo\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}},\"type\":\"function\"},{\"function\":{\"name\":\"bb7_get_file_contents\",\"description\":\"Get the contents of a file or directory from a GitHub repository\",\"parameters\":{\"type\":\"object\",\"properties\":{\"owner\":{\"type\":\"string\",\"description\":\"Repository owner (username or organization)\"},\"repo\":{\"type\":\"string\",\"description\":\"Repository name\"},\"path\":{\"type\":\"string\",\"description\":\"Path to the file or directory\"},\"branch\":{\"type\":\"string\",\"description\":\"Branch to get contents from\"}},\"required\":[\"owner\",\"repo\",\"path\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}},\"type\":\"function\"},{\"function\":{\"name\":\"bb7_get_issue\",\"description\":\"Get details of a specific issue in a GitHub repository.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"owner\":{\"type\":\"string\"},\"repo\":{\"type\":\"string\"},\"issue_number\":{\"type\":\"number\"}},\"required\":[\"owner\",\"repo\",\"issue_number\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}},\"type\":\"function\"},{\"function\":{\"name\":\"bb7_get_pull_request\",\"description\":\"Get details of a specific pull request\",\"parameters\":{\"type\":\"object\",\"properties\":{\"owner\":{\"type\":\"string\",\"description\":\"Repository owner (username or organization)\"},\"repo\":{\"type\":\"string\",\"description\":\"Repository name\"},\"pull_number\":{\"type\":\"number\",\"description\":\"Pull request number\"}},\"required\":[\"owner\",\"repo\",\"pull_number\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}},\"type\":\"function\"},{\"function\":{\"name\":\"bb7_get_pull_request_comments\",\"description\":\"Get the review comments on a pull request\",\"parameters\":{\"type\":\"object\",\"properties\":{\"owner\":{\"type\":\"string\",\"description\":\"Repository owner (username or organization)\"},\"repo\":{\"type\":\"string\",\"description\":\"Repository name\"},\"pull_number\":{\"type\":\"number\",\"description\":\"Pull request number\"}},\"required\":[\"owner\",\"repo\",\"pull_number\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}},\"type\":\"function\"},{\"function\":{\"name\":\"bb7_get_pull_request_files\",\"description\":\"Get the list of files changed in a pull request\",\"parameters\":{\"type\":\"object\",\"properties\":{\"owner\":{\"type\":\"string\",\"description\":\"Repository owner (username or organization)\"},\"repo\":{\"type\":\"string\",\"description\":\"Repository name\"},\"pull_number\":{\"type\":\"number\",\"description\":\"Pull request number\"}},\"required\":[\"owner\",\"repo\",\"pull_number\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}},\"type\":\"function\"},{\"function\":{\"name\":\"bb7_get_pull_request_reviews\",\"description\":\"Get the reviews on a pull request\",\"parameters\":{\"type\":\"object\",\"properties\":{\"owner\":{\"type\":\"string\",\"description\":\"Repository owner (username or organization)\"},\"repo\":{\"type\":\"string\",\"description\":\"Repository name\"},\"pull_number\":{\"type\":\"number\",\"description\":\"Pull request number\"}},\"required\":[\"owner\",\"repo\",\"pull_number\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}},\"type\":\"function\"},{\"function\":{\"name\":\"bb7_get_pull_request_status\",\"description\":\"Get the combined status of all status checks for a pull request\",\"parameters\":{\"type\":\"object\",\"properties\":{\"owner\":{\"type\":\"string\",\"description\":\"Repository owner (username or organization)\"},\"repo\":{\"type\":\"string\",\"description\":\"Repository name\"},\"pull_number\":{\"type\":\"number\",\"description\":\"Pull request number\"}},\"required\":[\"owner\",\"repo\",\"pull_number\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}},\"type\":\"function\"},{\"function\":{\"name\":\"bb7_getAccessibleAtlassianResources\",\"description\":\"Get cloudid to construct API calls to Atlassian REST APIs\",\"parameters\":{\"type\":\"object\",\"properties\":{},\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}},\"type\":\"function\"},{\"function\":{\"name\":\"bb7_getCompassComponent\",\"description\":\"Get a Compass component by ID\",\"parameters\":{\"type\":\"object\",\"properties\":{\"componentId\":{\"type\":\"string\",\"description\":\"The ID of the component to get\"}},\"required\":[\"componentId\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}},\"type\":\"function\"},{\"function\":{\"name\":\"bb7_getCompassComponents\",\"description\":\"Get a list of Compass components\",\"parameters\":{\"type\":\"object\",\"properties\":{\"cloudId\":{\"type\":\"string\",\"description\":\"Unique identifier for an Atlassian Cloud instance in the form of a UUID. Can also be a site URL. If not working, use the 'getAccessibleAtlassianResources' tool to find accessible Cloud IDs.\"},\"query\":{\"type\":\"string\",\"description\":\"The query to search for components.\"},\"after\":{\"type\":\"string\",\"description\":\"The cursor to start at.\"},\"maxResults\":{\"type\":\"number\",\"maximum\":50,\"default\":10,\"description\":\"The maximum number of items to return per page.\"}},\"required\":[\"cloudId\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}},\"type\":\"function\"},{\"function\":{\"name\":\"bb7_getCompassCustomFieldDefinitions\",\"description\":\"Get a list of Compass custom field definitions\",\"parameters\":{\"type\":\"object\",\"properties\":{\"cloudId\":{\"type\":\"string\",\"description\":\"Unique identifier for an Atlassian Cloud instance in the form of a UUID. Can also be a site URL. If not working, use the 'getAccessibleAtlassianResources' tool to find accessible Cloud IDs.\"}},\"required\":[\"cloudId\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}},\"type\":\"function\"},{\"function\":{\"name\":\"bb7_getConfluencePage\",\"description\":\"Get a page from Confluence\",\"parameters\":{\"type\":\"object\",\"properties\":{\"cloudId\":{\"type\":\"string\",\"description\":\"Unique identifier for an Atlassian Cloud instance in the form of a UUID. Can also be a site URL. If not working, use the 'getAccessibleAtlassianResources' tool to find accessible Cloud IDs.\"},\"pageId\":{\"type\":\"string\"}},\"required\":[\"cloudId\",\"pageId\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}},\"type\":\"function\"},{\"function\":{\"name\":\"bb7_getConfluencePageAncestors\",\"description\":\"Get all ancestors of a Confluence page\",\"parameters\":{\"type\":\"object\",\"properties\":{\"cloudId\":{\"type\":\"string\",\"description\":\"Unique identifier for an Atlassian Cloud instance in the form of a UUID. Can also be a site URL. If not working, use the 'getAccessibleAtlassianResources' tool to find accessible Cloud IDs.\"},\"pageId\":{\"type\":\"string\"},\"limit\":{\"type\":\"number\"}},\"required\":[\"cloudId\",\"pageId\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}},\"type\":\"function\"},{\"function\":{\"name\":\"bb7_getConfluencePageDescendants\",\"description\":\"Get descendants of a Confluence page\",\"parameters\":{\"type\":\"object\",\"properties\":{\"cloudId\":{\"type\":\"string\",\"description\":\"Unique identifier for an Atlassian Cloud instance in the form of a UUID. Can also be a site URL. If not working, use the 'getAccessibleAtlassianResources' tool to find accessible Cloud IDs.\"},\"pageId\":{\"type\":\"string\"},\"limit\":{\"type\":\"number\"},\"depth\":{\"type\":\"number\"},\"cursor\":{\"type\":\"string\"}},\"required\":[\"cloudId\",\"pageId\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}},\"type\":\"function\"},{\"function\":{\"name\":\"bb7_getConfluencePageFooterComments\",\"description\":\"Get footer comments for a Confluence page\",\"parameters\":{\"type\":\"object\",\"properties\":{\"cloudId\":{\"type\":\"string\",\"description\":\"Unique identifier for an Atlassian Cloud instance in the form of a UUID. Can also be a site URL. If not working, use the 'getAccessibleAtlassianResources' tool to find accessible Cloud IDs.\"},\"pageId\":{\"type\":\"string\"},\"limit\":{\"type\":\"number\"},\"cursor\":{\"type\":\"string\"},\"status\":{\"type\":\"string\",\"enum\":[\"current\",\"archived\",\"trashed\",\"deleted\",\"historical\",\"draft\"],\"default\":\"current\"},\"sort\":{\"type\":\"string\",\"enum\":[\"id\",\"-id\",\"created-date\",\"-created-date\"]}},\"required\":[\"cloudId\",\"pageId\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}},\"type\":\"function\"},{\"function\":{\"name\":\"bb7_getConfluencePageInlineComments\",\"description\":\"Get inline comments for a Confluence page\",\"parameters\":{\"type\":\"object\",\"properties\":{\"cloudId\":{\"type\":\"string\",\"description\":\"Unique identifier for an Atlassian Cloud instance in the form of a UUID. Can also be a site URL. If not working, use the 'getAccessibleAtlassianResources' tool to find accessible Cloud IDs.\"},\"pageId\":{\"type\":\"string\"},\"limit\":{\"type\":\"number\"},\"cursor\":{\"type\":\"string\"},\"status\":{\"type\":\"string\",\"enum\":[\"current\",\"archived\",\"trashed\",\"deleted\",\"historical\",\"draft\"],\"default\":\"current\"},\"resolutionStatus\":{\"type\":\"string\",\"enum\":[\"resolved\",\"open\",\"dangling\",\"reopened\"],\"default\":\"open\"},\"sort\":{\"type\":\"string\",\"enum\":[\"id\",\"-id\",\"created-date\",\"-created-date\"]}},\"required\":[\"cloudId\",\"pageId\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}},\"type\":\"function\"},{\"function\":{\"name\":\"bb7_getConfluenceSpaces\",\"description\":\"Get spaces from Confluence\",\"parameters\":{\"type\":\"object\",\"properties\":{\"cloudId\":{\"type\":\"string\",\"description\":\"Unique identifier for an Atlassian Cloud instance in the form of a UUID. Can also be a site URL. If not working, use the 'getAccessibleAtlassianResources' tool to find accessible Cloud IDs.\"},\"ids\":{\"anyOf\":[{\"type\":\"string\"},{\"type\":\"array\",\"items\":{\"type\":\"number\"}}]},\"keys\":{\"anyOf\":[{\"type\":\"string\"},{\"type\":\"array\",\"items\":{\"type\":\"string\"}}]},\"type\":{\"type\":\"string\",\"enum\":[\"global\",\"collaboration\",\"knowledge_base\",\"personal\"]},\"status\":{\"type\":\"string\",\"enum\":[\"current\",\"archived\"]},\"labels\":{\"anyOf\":[{\"type\":\"string\"},{\"type\":\"array\",\"items\":{\"type\":\"string\"}}]},\"favoritedBy\":{\"type\":\"string\"},\"notFavoritedBy\":{\"type\":\"string\"},\"sort\":{\"type\":\"string\"},\"descriptionFormat\":{\"type\":\"string\",\"enum\":[\"plain\",\"view\"]},\"includeIcon\":{\"type\":\"boolean\"},\"cursor\":{\"type\":\"string\"},\"limit\":{\"type\":\"number\"}},\"required\":[\"cloudId\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}},\"type\":\"function\"},{\"function\":{\"name\":\"bb7_getJiraIssue\",\"description\":\"Get the details of a Jira issue by issue id or key.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"cloudId\":{\"type\":\"string\",\"description\":\"Unique identifier for an Atlassian Cloud instance in the form of a UUID. Can also be a site URL. If not working, use the 'getAccessibleAtlassianResources' tool to find accessible Cloud IDs.\"},\"issueIdOrKey\":{\"type\":\"string\",\"description\":\"Issue id or key can be used to uniquely identify an existing issue.\\nIssue id is a numerical identifier. An example issue id is 10000.\\nIssue key is formatted as a project key followed by a hyphen '-' character and then followed by a sequential number.\\nAn example issue key is ISSUE-1.\"},\"fields\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"fieldsByKeys\":{\"type\":\"boolean\"},\"expand\":{\"type\":\"string\"},\"properties\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"updateHistory\":{\"type\":\"boolean\"},\"failFast\":{\"type\":\"boolean\"}},\"required\":[\"cloudId\",\"issueIdOrKey\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}},\"type\":\"function\"},{\"function\":{\"name\":\"bb7_getJiraIssueRemoteIssueLinks\",\"description\":\"Get remote issue links (eg: Confluence links etc...) of an existing Jira issue id or key\",\"parameters\":{\"type\":\"object\",\"properties\":{\"cloudId\":{\"type\":\"string\",\"description\":\"Unique identifier for an Atlassian Cloud instance in the form of a UUID. Can also be a site URL. If not working, use the 'getAccessibleAtlassianResources' tool to find accessible Cloud IDs.\"},\"issueIdOrKey\":{\"type\":\"string\",\"description\":\"Issue id or key can be used to uniquely identify an existing issue.\\nIssue id is a numerical identifier. An example issue id is 10000.\\nIssue key is formatted as a project key followed by a hyphen '-' character and then followed by a sequential number.\\nAn example issue key is ISSUE-1.\"},\"globalId\":{\"type\":\"string\",\"description\":\"An identifier for the remote item in the remote system.\\n          For example, the global ID for a remote item in Confluence would consist of the app ID and page ID, like this: appId=456&pageId=123.\\n          When a global ID is provided, this tool returns only the remote issue link of the given Jira issue that has the provided global ID.\\n          When no global ID is provided, this tool returns all the remote issue links of the given Jira issue.\"}},\"required\":[\"cloudId\",\"issueIdOrKey\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}},\"type\":\"function\"},{\"function\":{\"name\":\"bb7_getJiraProjectIssueTypesMetadata\",\"description\":\"Get a page of issue type metadata for a specified project. The issue type metadata will be used to create issue.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"cloudId\":{\"type\":\"string\",\"description\":\"Unique identifier for an Atlassian Cloud instance in the form of a UUID. Can also be a site URL. If not working, use the 'getAccessibleAtlassianResources' tool to find accessible Cloud IDs.\"},\"projectIdOrKey\":{\"type\":\"string\"},\"startAt\":{\"type\":\"number\",\"default\":0,\"description\":\"The index of the first item to return in a page of results (page offset).\"},\"maxResults\":{\"type\":\"number\",\"maximum\":200,\"default\":50,\"description\":\"The maximum number of items to return per page.\"}},\"required\":[\"cloudId\",\"projectIdOrKey\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}},\"type\":\"function\"},{\"function\":{\"name\":\"bb7_getPagesInConfluenceSpace\",\"description\":\"Get pages in a Confluence space\",\"parameters\":{\"type\":\"object\",\"properties\":{\"cloudId\":{\"type\":\"string\",\"description\":\"Unique identifier for an Atlassian Cloud instance in the form of a UUID. Can also be a site URL. If not working, use the 'getAccessibleAtlassianResources' tool to find accessible Cloud IDs.\"},\"spaceId\":{\"type\":\"string\"},\"limit\":{\"type\":\"number\",\"description\":\"Maximum number of pages to return (default: 25, max: 250)\"},\"cursor\":{\"type\":\"string\",\"description\":\"Opaque cursor for pagination\"},\"status\":{\"type\":\"string\",\"enum\":[\"current\",\"archived\",\"deleted\",\"trashed\"],\"description\":\"Filter pages by status\"},\"title\":{\"type\":\"string\",\"description\":\"Filter pages by title\"},\"sort\":{\"type\":\"string\",\"enum\":[\"id\",\"-id\",\"created-date\",\"-created-date\",\"modified-date\",\"-modified-date\",\"title\",\"-title\"],\"description\":\"Sort pages by field(s)\"},\"depth\":{\"type\":\"string\",\"enum\":[\"all\",\"root\"],\"description\":\"Filter pages by depth, default: all\"}},\"required\":[\"cloudId\",\"spaceId\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}},\"type\":\"function\"},{\"function\":{\"name\":\"bb7_getTransitionsForJiraIssue\",\"description\":\"Get available transitions for an existing Jira issue id or key.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"cloudId\":{\"type\":\"string\",\"description\":\"Unique identifier for an Atlassian Cloud instance in the form of a UUID. Can also be a site URL. If not working, use the 'getAccessibleAtlassianResources' tool to find accessible Cloud IDs.\"},\"issueIdOrKey\":{\"type\":\"string\",\"description\":\"Issue id or key can be used to uniquely identify an existing issue.\\nIssue id is a numerical identifier. An example issue id is 10000.\\nIssue key is formatted as a project key followed by a hyphen '-' character and then followed by a sequential number.\\nAn example issue key is ISSUE-1.\"},\"expand\":{\"type\":\"string\"},\"transitionId\":{\"type\":\"string\"},\"skipRemoteOnlyCondition\":{\"type\":\"boolean\"},\"includeUnavailableTransitions\":{\"type\":\"boolean\"},\"sortByOpsBarAndStatus\":{\"type\":\"boolean\"}},\"required\":[\"cloudId\",\"issueIdOrKey\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}},\"type\":\"function\"},{\"function\":{\"name\":\"bb7_getVisibleJiraProjects\",\"description\":\"Get visible Jira projects for which the user has either view, browse, edit or create permission on that project.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"cloudId\":{\"type\":\"string\",\"description\":\"Unique identifier for an Atlassian Cloud instance in the form of a UUID. Can also be a site URL. If not working, use the 'getAccessibleAtlassianResources' tool to find accessible Cloud IDs.\"},\"searchString\":{\"type\":\"string\",\"description\":\"Filter the results using a literal string. Projects with a matching key or name are returned (case insensitive)\"},\"action\":{\"type\":\"string\",\"enum\":[\"view\",\"browse\",\"edit\",\"create\"],\"default\":\"create\",\"description\":\"\\n      Filter results by projects for which the user can:\\n      * view the project\\n      * browse the project\\n      * edit the project\\n      * create the project, meaning that they have the Create issues project permission for the project in which the issue is created.\\n      \"},\"startAt\":{\"type\":\"number\",\"default\":0,\"description\":\"The index of the first item to return in a page of results (page offset).\"},\"maxResults\":{\"type\":\"number\",\"maximum\":50,\"default\":50,\"description\":\"The maximum number of items to return per page.\"},\"expandIssueTypes\":{\"type\":\"boolean\",\"default\":true,\"description\":\"To include additional information about the issue types associated with the project\"}},\"required\":[\"cloudId\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}},\"type\":\"function\"},{\"function\":{\"name\":\"bb7_list_commits\",\"description\":\"Get list of commits of a branch in a GitHub repository\",\"parameters\":{\"type\":\"object\",\"properties\":{\"owner\":{\"type\":\"string\"},\"repo\":{\"type\":\"string\"},\"sha\":{\"type\":\"string\"},\"page\":{\"type\":\"number\"},\"perPage\":{\"type\":\"number\"}},\"required\":[\"owner\",\"repo\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}},\"type\":\"function\"},{\"function\":{\"name\":\"bb7_list_issues\",\"description\":\"List issues in a GitHub repository with filtering options\",\"parameters\":{\"type\":\"object\",\"properties\":{\"owner\":{\"type\":\"string\"},\"repo\":{\"type\":\"string\"},\"direction\":{\"type\":\"string\",\"enum\":[\"asc\",\"desc\"]},\"labels\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"page\":{\"type\":\"number\"},\"per_page\":{\"type\":\"number\"},\"since\":{\"type\":\"string\"},\"sort\":{\"type\":\"string\",\"enum\":[\"created\",\"updated\",\"comments\"]},\"state\":{\"type\":\"string\",\"enum\":[\"open\",\"closed\",\"all\"]}},\"required\":[\"owner\",\"repo\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}},\"type\":\"function\"},{\"function\":{\"name\":\"bb7_list_pull_requests\",\"description\":\"List and filter repository pull requests\",\"parameters\":{\"type\":\"object\",\"properties\":{\"owner\":{\"type\":\"string\",\"description\":\"Repository owner (username or organization)\"},\"repo\":{\"type\":\"string\",\"description\":\"Repository name\"},\"state\":{\"type\":\"string\",\"enum\":[\"open\",\"closed\",\"all\"],\"description\":\"State of the pull requests to return\"},\"head\":{\"type\":\"string\",\"description\":\"Filter by head user or head organization and branch name\"},\"base\":{\"type\":\"string\",\"description\":\"Filter by base branch name\"},\"sort\":{\"type\":\"string\",\"enum\":[\"created\",\"updated\",\"popularity\",\"long-running\"],\"description\":\"What to sort results by\"},\"direction\":{\"type\":\"string\",\"enum\":[\"asc\",\"desc\"],\"description\":\"The direction of the sort\"},\"per_page\":{\"type\":\"number\",\"description\":\"Results per page (max 100)\"},\"page\":{\"type\":\"number\",\"description\":\"Page number of the results\"}},\"required\":[\"owner\",\"repo\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}},\"type\":\"function\"},{\"function\":{\"name\":\"bb7_lookupJiraAccountId\",\"description\":\"Lookup account ids of existing users in Jira based on the user's display name or email address.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"cloudId\":{\"type\":\"string\",\"description\":\"Unique identifier for an Atlassian Cloud instance in the form of a UUID. Can also be a site URL. If not working, use the 'getAccessibleAtlassianResources' tool to find accessible Cloud IDs.\"},\"searchString\":{\"type\":\"string\"}},\"required\":[\"cloudId\",\"searchString\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}},\"type\":\"function\"},{\"function\":{\"name\":\"bb7_merge_pull_request\",\"description\":\"Merge a pull request\",\"parameters\":{\"type\":\"object\",\"properties\":{\"owner\":{\"type\":\"string\",\"description\":\"Repository owner (username or organization)\"},\"repo\":{\"type\":\"string\",\"description\":\"Repository name\"},\"pull_number\":{\"type\":\"number\",\"description\":\"Pull request number\"},\"commit_title\":{\"type\":\"string\",\"description\":\"Title for the automatic commit message\"},\"commit_message\":{\"type\":\"string\",\"description\":\"Extra detail to append to automatic commit message\"},\"merge_method\":{\"type\":\"string\",\"enum\":[\"merge\",\"squash\",\"rebase\"],\"description\":\"Merge method to use\"}},\"required\":[\"owner\",\"repo\",\"pull_number\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}},\"type\":\"function\"},{\"function\":{\"name\":\"bb7_push_files\",\"description\":\"Push multiple files to a GitHub repository in a single commit\",\"parameters\":{\"type\":\"object\",\"properties\":{\"owner\":{\"type\":\"string\",\"description\":\"Repository owner (username or organization)\"},\"repo\":{\"type\":\"string\",\"description\":\"Repository name\"},\"branch\":{\"type\":\"string\",\"description\":\"Branch to push to (e.g., 'main' or 'master')\"},\"files\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"path\":{\"type\":\"string\"},\"content\":{\"type\":\"string\"}},\"required\":[\"path\",\"content\"],\"additionalProperties\":false},\"description\":\"Array of files to push\"},\"message\":{\"type\":\"string\",\"description\":\"Commit message\"}},\"required\":[\"owner\",\"repo\",\"branch\",\"files\",\"message\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}},\"type\":\"function\"},{\"function\":{\"name\":\"bb7_search_code\",\"description\":\"Search for code across GitHub repositories\",\"parameters\":{\"type\":\"object\",\"properties\":{\"q\":{\"type\":\"string\"},\"order\":{\"type\":\"string\",\"enum\":[\"asc\",\"desc\"]},\"page\":{\"type\":\"number\",\"minimum\":1},\"per_page\":{\"type\":\"number\",\"minimum\":1,\"maximum\":100}},\"required\":[\"q\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}},\"type\":\"function\"},{\"function\":{\"name\":\"bb7_search_issues\",\"description\":\"Search for issues and pull requests across GitHub repositories\",\"parameters\":{\"type\":\"object\",\"properties\":{\"q\":{\"type\":\"string\"},\"order\":{\"type\":\"string\",\"enum\":[\"asc\",\"desc\"]},\"page\":{\"type\":\"number\",\"minimum\":1},\"per_page\":{\"type\":\"number\",\"minimum\":1,\"maximum\":100},\"sort\":{\"type\":\"string\",\"enum\":[\"comments\",\"reactions\",\"reactions-+1\",\"reactions--1\",\"reactions-smile\",\"reactions-thinking_face\",\"reactions-heart\",\"reactions-tada\",\"interactions\",\"created\",\"updated\"]}},\"required\":[\"q\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}},\"type\":\"function\"},{\"function\":{\"name\":\"bb7_search_repositories\",\"description\":\"Search for GitHub repositories\",\"parameters\":{\"type\":\"object\",\"properties\":{\"query\":{\"type\":\"string\",\"description\":\"Search query (see GitHub search syntax)\"},\"page\":{\"type\":\"number\",\"description\":\"Page number for pagination (default: 1)\"},\"perPage\":{\"type\":\"number\",\"description\":\"Number of results per page (default: 30, max: 100)\"}},\"required\":[\"query\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}},\"type\":\"function\"},{\"function\":{\"name\":\"bb7_search_users\",\"description\":\"Search for users on GitHub\",\"parameters\":{\"type\":\"object\",\"properties\":{\"q\":{\"type\":\"string\"},\"order\":{\"type\":\"string\",\"enum\":[\"asc\",\"desc\"]},\"page\":{\"type\":\"number\",\"minimum\":1},\"per_page\":{\"type\":\"number\",\"minimum\":1,\"maximum\":100},\"sort\":{\"type\":\"string\",\"enum\":[\"followers\",\"repositories\",\"joined\"]}},\"required\":[\"q\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}},\"type\":\"function\"},{\"function\":{\"name\":\"bb7_searchConfluenceUsingCql\",\"description\":\"Search content in Confluence using CQL\",\"parameters\":{\"type\":\"object\",\"properties\":{\"cloudId\":{\"type\":\"string\",\"description\":\"Unique identifier for an Atlassian Cloud instance in the form of a UUID. Can also be a site URL. If not working, use the 'getAccessibleAtlassianResources' tool to find accessible Cloud IDs.\"},\"cql\":{\"type\":\"string\"},\"cqlcontext\":{\"type\":\"string\"},\"cursor\":{\"type\":\"string\"},\"expand\":{\"type\":\"string\"},\"limit\":{\"type\":\"number\"},\"prev\":{\"type\":\"boolean\"},\"next\":{\"type\":\"boolean\"}},\"required\":[\"cloudId\",\"cql\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}},\"type\":\"function\"},{\"function\":{\"name\":\"bb7_searchJiraIssuesUsingJql\",\"description\":\"Search Jira issues using Jira Query Language (JQL).\",\"parameters\":{\"type\":\"object\",\"properties\":{\"cloudId\":{\"type\":\"string\",\"description\":\"Unique identifier for an Atlassian Cloud instance in the form of a UUID. Can also be a site URL. If not working, use the 'getAccessibleAtlassianResources' tool to find accessible Cloud IDs.\"},\"jql\":{\"type\":\"string\",\"description\":\"A Jira Query Language (JQL) expression to search Jira issues\"},\"maxResults\":{\"type\":\"number\",\"maximum\":100,\"default\":50,\"description\":\"A maximum number of issue to search per page. Default is 50, max is 100\"},\"fields\":{\"type\":\"array\",\"items\":{\"type\":\"string\"},\"default\":[\"summary\",\"description\",\"status\",\"issuetype\",\"priority\",\"created\"]},\"nextPageToken\":{\"type\":\"string\",\"description\":\"This is used for pagination purpose to fetch more data if a JQL search has more issues in next pages\"}},\"required\":[\"cloudId\",\"jql\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}},\"type\":\"function\"},{\"function\":{\"name\":\"bb7_transitionJiraIssue\",\"description\":\"Transition an existing Jira issue (that has issue id or key) to a new status.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"cloudId\":{\"type\":\"string\",\"description\":\"Unique identifier for an Atlassian Cloud instance in the form of a UUID. Can also be a site URL. If not working, use the 'getAccessibleAtlassianResources' tool to find accessible Cloud IDs.\"},\"issueIdOrKey\":{\"type\":\"string\",\"description\":\"Issue id or key can be used to uniquely identify an existing issue.\\nIssue id is a numerical identifier. An example issue id is 10000.\\nIssue key is formatted as a project key followed by a hyphen '-' character and then followed by a sequential number.\\nAn example issue key is ISSUE-1.\"},\"transition\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[\"id\"],\"additionalProperties\":false},\"fields\":{\"type\":\"object\",\"additionalProperties\":{}},\"update\":{\"type\":\"object\",\"additionalProperties\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"additionalProperties\":{\"description\":\"This is the field value. The actual value will depends on the field type.\"}},\"description\":\"List of operations\"}},\"historyMetadata\":{\"type\":\"object\",\"properties\":{\"type\":{\"type\":\"string\"},\"description\":{\"type\":\"string\"},\"descriptionKey\":{\"type\":\"string\"},\"activityDescription\":{\"type\":\"string\"},\"activityDescriptionKey\":{\"type\":\"string\"},\"emailDescription\":{\"type\":\"string\"},\"emailDescriptionKey\":{\"type\":\"string\"},\"actor\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"displayName\":{\"type\":\"string\"},\"type\":{\"type\":\"string\"},\"avatarUrl\":{\"type\":\"string\"},\"url\":{\"type\":\"string\"}},\"additionalProperties\":false},\"generator\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"displayName\":{\"type\":\"string\"},\"type\":{\"type\":\"string\"},\"avatarUrl\":{\"type\":\"string\"},\"url\":{\"type\":\"string\"}},\"additionalProperties\":false},\"cause\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"displayName\":{\"type\":\"string\"},\"type\":{\"type\":\"string\"},\"avatarUrl\":{\"type\":\"string\"},\"url\":{\"type\":\"string\"}},\"additionalProperties\":false},\"extraData\":{\"type\":\"object\",\"additionalProperties\":{\"type\":\"string\"}}},\"additionalProperties\":false}},\"required\":[\"cloudId\",\"issueIdOrKey\",\"transition\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}},\"type\":\"function\"},{\"function\":{\"name\":\"bb7_update_issue\",\"description\":\"Update an existing issue in a GitHub repository\",\"parameters\":{\"type\":\"object\",\"properties\":{\"owner\":{\"type\":\"string\"},\"repo\":{\"type\":\"string\"},\"issue_number\":{\"type\":\"number\"},\"title\":{\"type\":\"string\"},\"body\":{\"type\":\"string\"},\"assignees\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"milestone\":{\"type\":\"number\"},\"labels\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"state\":{\"type\":\"string\",\"enum\":[\"open\",\"closed\"]}},\"required\":[\"owner\",\"repo\",\"issue_number\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}},\"type\":\"function\"},{\"function\":{\"name\":\"bb7_update_pull_request_branch\",\"description\":\"Update a pull request branch with the latest changes from the base branch\",\"parameters\":{\"type\":\"object\",\"properties\":{\"owner\":{\"type\":\"string\",\"description\":\"Repository owner (username or organization)\"},\"repo\":{\"type\":\"string\",\"description\":\"Repository name\"},\"pull_number\":{\"type\":\"number\",\"description\":\"Pull request number\"},\"expected_head_sha\":{\"type\":\"string\",\"description\":\"The expected SHA of the pull request's HEAD ref\"}},\"required\":[\"owner\",\"repo\",\"pull_number\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}},\"type\":\"function\"},{\"function\":{\"name\":\"bb7_updateConfluencePage\",\"description\":\"Update an existing page in Confluence\",\"parameters\":{\"type\":\"object\",\"properties\":{\"cloudId\":{\"type\":\"string\",\"description\":\"Unique identifier for an Atlassian Cloud instance in the form of a UUID. Can also be a site URL. If not working, use the 'getAccessibleAtlassianResources' tool to find accessible Cloud IDs.\"},\"pageId\":{\"type\":\"string\"},\"title\":{\"type\":\"string\"},\"status\":{\"type\":\"string\",\"enum\":[\"current\",\"draft\"]},\"spaceId\":{\"type\":\"string\"},\"parentId\":{\"type\":\"string\"},\"body\":{\"type\":\"string\",\"description\":\"The content of the page. You **MUST** use markdown format.\"},\"versionNumber\":{\"type\":\"number\"},\"versionMessage\":{\"type\":\"string\"}},\"required\":[\"cloudId\",\"pageId\",\"title\",\"status\",\"body\",\"versionNumber\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}},\"type\":\"function\"},{\"function\":{\"name\":\"bb7_ZENDESK-CREATE-TICKET\",\"description\":\"Creates a ticket. [See the documentation](https://developer.zendesk.com/api-reference/ticketing/tickets/tickets/#create-ticket).\",\"parameters\":{\"type\":\"object\",\"properties\":{\"instruction\":{\"type\":\"string\"}},\"required\":[\"instruction\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}},\"type\":\"function\"},{\"function\":{\"name\":\"bb7_ZENDESK-DELETE-TICKET\",\"description\":\"Deletes a ticket. [See the documentation](https://developer.zendesk.com/api-reference/ticketing/tickets/tickets/#delete-ticket).\",\"parameters\":{\"type\":\"object\",\"properties\":{\"instruction\":{\"type\":\"string\"}},\"required\":[\"instruction\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}},\"type\":\"function\"},{\"function\":{\"name\":\"bb7_ZENDESK-GET-TICKET-INFO\",\"description\":\"Retrieves information about a specific ticket. [See the documentation](https://developer.zendesk.com/api-reference/ticketing/tickets/tickets/#show-ticket).\",\"parameters\":{\"type\":\"object\",\"properties\":{\"instruction\":{\"type\":\"string\"}},\"required\":[\"instruction\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}},\"type\":\"function\"},{\"function\":{\"name\":\"bb7_ZENDESK-LIST-TICKETS\",\"description\":\"Retrieves a list of tickets. [See the documentation](https://developer.zendesk.com/api-reference/ticketing/tickets/tickets/#list-tickets).\",\"parameters\":{\"type\":\"object\",\"properties\":{\"instruction\":{\"type\":\"string\"}},\"required\":[\"instruction\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}},\"type\":\"function\"},{\"function\":{\"name\":\"bb7_ZENDESK-SEARCH-TICKETS\",\"description\":\"Searches for tickets using Zendesk's search API. [See the documentation](https://developer.zendesk.com/api-reference/ticketing/ticket-management/search/#search-tickets).\",\"parameters\":{\"type\":\"object\",\"properties\":{\"instruction\":{\"type\":\"string\"}},\"required\":[\"instruction\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}},\"type\":\"function\"},{\"function\":{\"name\":\"bb7_ZENDESK-UPDATE-TICKET\",\"description\":\"Updates a ticket. [See the documentation](https://developer.zendesk.com/api-reference/ticketing/tickets/tickets/#update-ticket).\",\"parameters\":{\"type\":\"object\",\"properties\":{\"instruction\":{\"type\":\"string\"}},\"required\":[\"instruction\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}},\"type\":\"function\"},{\"function\":{\"name\":\"notebook_install_packages\",\"description\":\"Install a list of packages on a notebook kernel to be used within that notebook. This tool should be used when working with a jupyter notebook with python code cells. Do not use this tool if not already working with a notebook, or for a language other than python.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"filePath\":{\"description\":\"The absolute path of the notebook with the active kernel.\",\"type\":\"string\"},\"packageList\":{\"description\":\"A list of packages to install.\",\"type\":\"array\",\"items\":{\"type\":\"string\"}}},\"required\":[\"filePath\",\"packageList\"]}},\"type\":\"function\"},{\"function\":{\"name\":\"notebook_list_packages\",\"description\":\"List the installed packages that are currently available in the selected kernel for a notebook editor. This tool should be used when working with a jupyter notebook with python code cells. Do not use this tool if not already working with a notebook, or for a language other than python.\",\"parameters\":{\"type\":\"object\",\"properties\":{\"filePath\":{\"description\":\"The absolute path of the notebook with the active kernel.\",\"type\":\"string\"}},\"required\":[\"filePath\"]}},\"type\":\"function\"}],\"n\":1,\"stream\":true}",
    "timestamp": "2025-06-07_20-41-17"
}